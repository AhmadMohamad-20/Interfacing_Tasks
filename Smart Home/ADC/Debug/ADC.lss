
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d6c  00000e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800062  00800062  00000e02  2**0
                  ALLOC
  3 .debug_aranges 000000f0  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022e  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000787  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000287  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb3  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 00005950  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 06 	call	0xcbe	; 0xcbe <main>
  8a:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GENERAL_INTERRUPT_enableInterrupt>:
#include "GEN_INTERRUPT__Reg.h"
#include "GEN_INTERRUPT__Private.h"
#include "GEN_INTERRUPT__Interacing.h"

void GENERAL_INTERRUPT_enableInterrupt()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GENERAL_INTERRUPT_PIN);
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <GENERAL_INTERRUPT_disableInterrupt>:
void GENERAL_INTERRUPT_disableInterrupt()
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,GENERAL_INTERRUPT_PIN);
  b6:	af e5       	ldi	r26, 0x5F	; 95
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ef e5       	ldi	r30, 0x5F	; 95
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <DIO_setPinDirection>:
#include "DIO_Private.h"
#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_setPinDirection(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_direction)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	28 97       	sbiw	r28, 0x08	; 8
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	6b 83       	std	Y+3, r22	; 0x03
  e2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO_setPinDirection+0x26>
  ee:	f4 c0       	rjmp	.+488    	; 0x2d8 <DIO_setPinDirection+0x20e>
	{
		if (copy_DIO_direction == OUTPUT)
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	09 f0       	breq	.+2      	; 0xf8 <DIO_setPinDirection+0x2e>
  f6:	72 c0       	rjmp	.+228    	; 0x1dc <DIO_setPinDirection+0x112>
		{
			switch (copy_DIO_port)
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	38 87       	std	Y+8, r19	; 0x08
 100:	2f 83       	std	Y+7, r18	; 0x07
 102:	8f 81       	ldd	r24, Y+7	; 0x07
 104:	98 85       	ldd	r25, Y+8	; 0x08
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	49 f1       	breq	.+82     	; 0x15e <DIO_setPinDirection+0x94>
 10c:	2f 81       	ldd	r18, Y+7	; 0x07
 10e:	38 85       	ldd	r19, Y+8	; 0x08
 110:	22 30       	cpi	r18, 0x02	; 2
 112:	31 05       	cpc	r19, r1
 114:	2c f4       	brge	.+10     	; 0x120 <DIO_setPinDirection+0x56>
 116:	8f 81       	ldd	r24, Y+7	; 0x07
 118:	98 85       	ldd	r25, Y+8	; 0x08
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	61 f0       	breq	.+24     	; 0x136 <DIO_setPinDirection+0x6c>
 11e:	5b c0       	rjmp	.+182    	; 0x1d6 <DIO_setPinDirection+0x10c>
 120:	2f 81       	ldd	r18, Y+7	; 0x07
 122:	38 85       	ldd	r19, Y+8	; 0x08
 124:	22 30       	cpi	r18, 0x02	; 2
 126:	31 05       	cpc	r19, r1
 128:	71 f1       	breq	.+92     	; 0x186 <DIO_setPinDirection+0xbc>
 12a:	8f 81       	ldd	r24, Y+7	; 0x07
 12c:	98 85       	ldd	r25, Y+8	; 0x08
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	91 05       	cpc	r25, r1
 132:	e9 f1       	breq	.+122    	; 0x1ae <DIO_setPinDirection+0xe4>
 134:	50 c0       	rjmp	.+160    	; 0x1d6 <DIO_setPinDirection+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(DDRA,copy_DIO_pin);
 136:	aa e3       	ldi	r26, 0x3A	; 58
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	ea e3       	ldi	r30, 0x3A	; 58
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_setPinDirection+0x8a>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_setPinDirection+0x86>
 158:	84 2b       	or	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	bf c0       	rjmp	.+382    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTB:
					SET_BIT(DDRB,copy_DIO_pin);
 15e:	a7 e3       	ldi	r26, 0x37	; 55
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e7 e3       	ldi	r30, 0x37	; 55
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_setPinDirection+0xb2>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_setPinDirection+0xae>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	ab c0       	rjmp	.+342    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTC:
					SET_BIT(DDRC,copy_DIO_pin);
 186:	a4 e3       	ldi	r26, 0x34	; 52
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e4 e3       	ldi	r30, 0x34	; 52
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_setPinDirection+0xda>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_setPinDirection+0xd6>
 1a8:	84 2b       	or	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	97 c0       	rjmp	.+302    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTD:
					SET_BIT(DDRD,copy_DIO_pin);
 1ae:	a1 e3       	ldi	r26, 0x31	; 49
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e1 e3       	ldi	r30, 0x31	; 49
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPinDirection+0x102>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPinDirection+0xfe>
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	83 c0       	rjmp	.+262    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				default:
					local_errorState = NOT_OK_STAT;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	80 c0       	rjmp	.+256    	; 0x2dc <DIO_setPinDirection+0x212>
			}
		}
		else if (copy_DIO_direction == INPUT)
 1dc:	8c 81       	ldd	r24, Y+4	; 0x04
 1de:	88 23       	and	r24, r24
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <DIO_setPinDirection+0x11a>
 1e2:	77 c0       	rjmp	.+238    	; 0x2d2 <DIO_setPinDirection+0x208>
		{
			switch (copy_DIO_port)
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	3e 83       	std	Y+6, r19	; 0x06
 1ec:	2d 83       	std	Y+5, r18	; 0x05
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	9e 81       	ldd	r25, Y+6	; 0x06
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	91 05       	cpc	r25, r1
 1f6:	59 f1       	breq	.+86     	; 0x24e <DIO_setPinDirection+0x184>
 1f8:	2d 81       	ldd	r18, Y+5	; 0x05
 1fa:	3e 81       	ldd	r19, Y+6	; 0x06
 1fc:	22 30       	cpi	r18, 0x02	; 2
 1fe:	31 05       	cpc	r19, r1
 200:	2c f4       	brge	.+10     	; 0x20c <DIO_setPinDirection+0x142>
 202:	8d 81       	ldd	r24, Y+5	; 0x05
 204:	9e 81       	ldd	r25, Y+6	; 0x06
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	69 f0       	breq	.+26     	; 0x224 <DIO_setPinDirection+0x15a>
 20a:	60 c0       	rjmp	.+192    	; 0x2cc <DIO_setPinDirection+0x202>
 20c:	2d 81       	ldd	r18, Y+5	; 0x05
 20e:	3e 81       	ldd	r19, Y+6	; 0x06
 210:	22 30       	cpi	r18, 0x02	; 2
 212:	31 05       	cpc	r19, r1
 214:	89 f1       	breq	.+98     	; 0x278 <DIO_setPinDirection+0x1ae>
 216:	8d 81       	ldd	r24, Y+5	; 0x05
 218:	9e 81       	ldd	r25, Y+6	; 0x06
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	91 05       	cpc	r25, r1
 21e:	09 f4       	brne	.+2      	; 0x222 <DIO_setPinDirection+0x158>
 220:	40 c0       	rjmp	.+128    	; 0x2a2 <DIO_setPinDirection+0x1d8>
 222:	54 c0       	rjmp	.+168    	; 0x2cc <DIO_setPinDirection+0x202>
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA,copy_DIO_pin);
 224:	aa e3       	ldi	r26, 0x3A	; 58
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	ea e3       	ldi	r30, 0x3A	; 58
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_setPinDirection+0x178>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_setPinDirection+0x174>
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	8c 93       	st	X, r24
 24c:	47 c0       	rjmp	.+142    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTB:
					CLEAR_BIT(DDRB,copy_DIO_pin);
 24e:	a7 e3       	ldi	r26, 0x37	; 55
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e7 e3       	ldi	r30, 0x37	; 55
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	48 2f       	mov	r20, r24
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 2e       	mov	r0, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_setPinDirection+0x1a2>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_setPinDirection+0x19e>
 270:	80 95       	com	r24
 272:	84 23       	and	r24, r20
 274:	8c 93       	st	X, r24
 276:	32 c0       	rjmp	.+100    	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTC:
					CLEAR_BIT(DDRC,copy_DIO_pin);
 278:	a4 e3       	ldi	r26, 0x34	; 52
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e4 e3       	ldi	r30, 0x34	; 52
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_setPinDirection+0x1cc>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_setPinDirection+0x1c8>
 29a:	80 95       	com	r24
 29c:	84 23       	and	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	1d c0       	rjmp	.+58     	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				case DIO_PORTD:
					CLEAR_BIT(DDRD,copy_DIO_pin);
 2a2:	a1 e3       	ldi	r26, 0x31	; 49
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e1 e3       	ldi	r30, 0x31	; 49
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_setPinDirection+0x1f6>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_setPinDirection+0x1f2>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <DIO_setPinDirection+0x212>
					break;
				default:
					local_errorState = NOT_OK_STAT;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <DIO_setPinDirection+0x212>
			}
		}
		else
		{
			local_errorState = NOT_OK_STAT;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_setPinDirection+0x212>
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_errorState;
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 2de:	28 96       	adiw	r28, 0x08	; 8
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <DIO_setPinValue>:

uint8 DIO_setPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_value)
{
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	28 97       	sbiw	r28, 0x08	; 8
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	8a 83       	std	Y+2, r24	; 0x02
 306:	6b 83       	std	Y+3, r22	; 0x03
 308:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	88 30       	cpi	r24, 0x08	; 8
 312:	08 f0       	brcs	.+2      	; 0x316 <DIO_setPinValue+0x26>
 314:	f4 c0       	rjmp	.+488    	; 0x4fe <DIO_setPinValue+0x20e>
	{
		if (copy_DIO_value == HIGH)
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <DIO_setPinValue+0x2e>
 31c:	72 c0       	rjmp	.+228    	; 0x402 <DIO_setPinValue+0x112>
		{
			switch(copy_DIO_port)
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	38 87       	std	Y+8, r19	; 0x08
 326:	2f 83       	std	Y+7, r18	; 0x07
 328:	8f 81       	ldd	r24, Y+7	; 0x07
 32a:	98 85       	ldd	r25, Y+8	; 0x08
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 05       	cpc	r25, r1
 330:	49 f1       	breq	.+82     	; 0x384 <DIO_setPinValue+0x94>
 332:	2f 81       	ldd	r18, Y+7	; 0x07
 334:	38 85       	ldd	r19, Y+8	; 0x08
 336:	22 30       	cpi	r18, 0x02	; 2
 338:	31 05       	cpc	r19, r1
 33a:	2c f4       	brge	.+10     	; 0x346 <DIO_setPinValue+0x56>
 33c:	8f 81       	ldd	r24, Y+7	; 0x07
 33e:	98 85       	ldd	r25, Y+8	; 0x08
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	61 f0       	breq	.+24     	; 0x35c <DIO_setPinValue+0x6c>
 344:	5b c0       	rjmp	.+182    	; 0x3fc <DIO_setPinValue+0x10c>
 346:	2f 81       	ldd	r18, Y+7	; 0x07
 348:	38 85       	ldd	r19, Y+8	; 0x08
 34a:	22 30       	cpi	r18, 0x02	; 2
 34c:	31 05       	cpc	r19, r1
 34e:	71 f1       	breq	.+92     	; 0x3ac <DIO_setPinValue+0xbc>
 350:	8f 81       	ldd	r24, Y+7	; 0x07
 352:	98 85       	ldd	r25, Y+8	; 0x08
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	91 05       	cpc	r25, r1
 358:	e9 f1       	breq	.+122    	; 0x3d4 <DIO_setPinValue+0xe4>
 35a:	50 c0       	rjmp	.+160    	; 0x3fc <DIO_setPinValue+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(PORTA,copy_DIO_pin);
 35c:	ab e3       	ldi	r26, 0x3B	; 59
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	eb e3       	ldi	r30, 0x3B	; 59
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_setPinValue+0x8a>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_setPinValue+0x86>
 37e:	84 2b       	or	r24, r20
 380:	8c 93       	st	X, r24
 382:	bf c0       	rjmp	.+382    	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTB:
					SET_BIT(PORTB,copy_DIO_pin);
 384:	a8 e3       	ldi	r26, 0x38	; 56
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e8 e3       	ldi	r30, 0x38	; 56
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_setPinValue+0xb2>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_setPinValue+0xae>
 3a6:	84 2b       	or	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	ab c0       	rjmp	.+342    	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTC:
					SET_BIT(PORTC,copy_DIO_pin);
 3ac:	a5 e3       	ldi	r26, 0x35	; 53
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e5 e3       	ldi	r30, 0x35	; 53
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_setPinValue+0xda>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_setPinValue+0xd6>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	97 c0       	rjmp	.+302    	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTD:
					SET_BIT(PORTD,copy_DIO_pin);
 3d4:	a2 e3       	ldi	r26, 0x32	; 50
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e2 e3       	ldi	r30, 0x32	; 50
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_setPinValue+0x102>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_setPinValue+0xfe>
 3f6:	84 2b       	or	r24, r20
 3f8:	8c 93       	st	X, r24
 3fa:	83 c0       	rjmp	.+262    	; 0x502 <DIO_setPinValue+0x212>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	80 c0       	rjmp	.+256    	; 0x502 <DIO_setPinValue+0x212>
					break;
			}
		}
		else if(copy_DIO_value == LOW)
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 23       	and	r24, r24
 406:	09 f0       	breq	.+2      	; 0x40a <DIO_setPinValue+0x11a>
 408:	77 c0       	rjmp	.+238    	; 0x4f8 <DIO_setPinValue+0x208>
		{
			switch(copy_DIO_port)
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	3e 83       	std	Y+6, r19	; 0x06
 412:	2d 83       	std	Y+5, r18	; 0x05
 414:	8d 81       	ldd	r24, Y+5	; 0x05
 416:	9e 81       	ldd	r25, Y+6	; 0x06
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	91 05       	cpc	r25, r1
 41c:	59 f1       	breq	.+86     	; 0x474 <DIO_setPinValue+0x184>
 41e:	2d 81       	ldd	r18, Y+5	; 0x05
 420:	3e 81       	ldd	r19, Y+6	; 0x06
 422:	22 30       	cpi	r18, 0x02	; 2
 424:	31 05       	cpc	r19, r1
 426:	2c f4       	brge	.+10     	; 0x432 <DIO_setPinValue+0x142>
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	9e 81       	ldd	r25, Y+6	; 0x06
 42c:	00 97       	sbiw	r24, 0x00	; 0
 42e:	69 f0       	breq	.+26     	; 0x44a <DIO_setPinValue+0x15a>
 430:	60 c0       	rjmp	.+192    	; 0x4f2 <DIO_setPinValue+0x202>
 432:	2d 81       	ldd	r18, Y+5	; 0x05
 434:	3e 81       	ldd	r19, Y+6	; 0x06
 436:	22 30       	cpi	r18, 0x02	; 2
 438:	31 05       	cpc	r19, r1
 43a:	89 f1       	breq	.+98     	; 0x49e <DIO_setPinValue+0x1ae>
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	9e 81       	ldd	r25, Y+6	; 0x06
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	91 05       	cpc	r25, r1
 444:	09 f4       	brne	.+2      	; 0x448 <DIO_setPinValue+0x158>
 446:	40 c0       	rjmp	.+128    	; 0x4c8 <DIO_setPinValue+0x1d8>
 448:	54 c0       	rjmp	.+168    	; 0x4f2 <DIO_setPinValue+0x202>
			{
				case DIO_PORTA:
					CLEAR_BIT(PORTA,copy_DIO_pin);
 44a:	ab e3       	ldi	r26, 0x3B	; 59
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	eb e3       	ldi	r30, 0x3B	; 59
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_setPinValue+0x178>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_setPinValue+0x174>
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	8c 93       	st	X, r24
 472:	47 c0       	rjmp	.+142    	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTB:
					CLEAR_BIT(PORTB,copy_DIO_pin);
 474:	a8 e3       	ldi	r26, 0x38	; 56
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e8 e3       	ldi	r30, 0x38	; 56
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_setPinValue+0x1a2>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_setPinValue+0x19e>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
 49c:	32 c0       	rjmp	.+100    	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTC:
					CLEAR_BIT(PORTC,copy_DIO_pin);
 49e:	a5 e3       	ldi	r26, 0x35	; 53
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e3       	ldi	r30, 0x35	; 53
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_setPinValue+0x1cc>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_setPinValue+0x1c8>
 4c0:	80 95       	com	r24
 4c2:	84 23       	and	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	1d c0       	rjmp	.+58     	; 0x502 <DIO_setPinValue+0x212>
					break;
				case DIO_PORTD:
					CLEAR_BIT(PORTD,copy_DIO_pin);
 4c8:	a2 e3       	ldi	r26, 0x32	; 50
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e2 e3       	ldi	r30, 0x32	; 50
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 2e       	mov	r0, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_setPinValue+0x1f6>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_setPinValue+0x1f2>
 4ea:	80 95       	com	r24
 4ec:	84 23       	and	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <DIO_setPinValue+0x212>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <DIO_setPinValue+0x212>
					break;
			}
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	89 83       	std	Y+1, r24	; 0x01
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_setPinValue+0x212>
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
 502:	89 81       	ldd	r24, Y+1	; 0x01
}
 504:	28 96       	adiw	r28, 0x08	; 8
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	cf 91       	pop	r28
 512:	df 91       	pop	r29
 514:	08 95       	ret

00000516 <DIO_ReadPinValue>:

uint8 DIO_ReadPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin,  uint8 *copy_DIO_pValue)
{
 516:	df 93       	push	r29
 518:	cf 93       	push	r28
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
 51e:	27 97       	sbiw	r28, 0x07	; 7
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	de bf       	out	0x3e, r29	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	6b 83       	std	Y+3, r22	; 0x03
 52e:	5d 83       	std	Y+5, r21	; 0x05
 530:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_pin <= PIN7) && (copy_DIO_pValue != NULL))
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 30       	cpi	r24, 0x08	; 8
 53a:	08 f0       	brcs	.+2      	; 0x53e <DIO_ReadPinValue+0x28>
 53c:	79 c0       	rjmp	.+242    	; 0x630 <DIO_ReadPinValue+0x11a>
 53e:	8c 81       	ldd	r24, Y+4	; 0x04
 540:	9d 81       	ldd	r25, Y+5	; 0x05
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	09 f4       	brne	.+2      	; 0x548 <DIO_ReadPinValue+0x32>
 546:	74 c0       	rjmp	.+232    	; 0x630 <DIO_ReadPinValue+0x11a>
	{
		switch (copy_DIO_port)
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	3f 83       	std	Y+7, r19	; 0x07
 550:	2e 83       	std	Y+6, r18	; 0x06
 552:	4e 81       	ldd	r20, Y+6	; 0x06
 554:	5f 81       	ldd	r21, Y+7	; 0x07
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	51 05       	cpc	r21, r1
 55a:	59 f1       	breq	.+86     	; 0x5b2 <DIO_ReadPinValue+0x9c>
 55c:	8e 81       	ldd	r24, Y+6	; 0x06
 55e:	9f 81       	ldd	r25, Y+7	; 0x07
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	91 05       	cpc	r25, r1
 564:	34 f4       	brge	.+12     	; 0x572 <DIO_ReadPinValue+0x5c>
 566:	2e 81       	ldd	r18, Y+6	; 0x06
 568:	3f 81       	ldd	r19, Y+7	; 0x07
 56a:	21 15       	cp	r18, r1
 56c:	31 05       	cpc	r19, r1
 56e:	69 f0       	breq	.+26     	; 0x58a <DIO_ReadPinValue+0x74>
 570:	5c c0       	rjmp	.+184    	; 0x62a <DIO_ReadPinValue+0x114>
 572:	4e 81       	ldd	r20, Y+6	; 0x06
 574:	5f 81       	ldd	r21, Y+7	; 0x07
 576:	42 30       	cpi	r20, 0x02	; 2
 578:	51 05       	cpc	r21, r1
 57a:	79 f1       	breq	.+94     	; 0x5da <DIO_ReadPinValue+0xc4>
 57c:	8e 81       	ldd	r24, Y+6	; 0x06
 57e:	9f 81       	ldd	r25, Y+7	; 0x07
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	91 05       	cpc	r25, r1
 584:	09 f4       	brne	.+2      	; 0x588 <DIO_ReadPinValue+0x72>
 586:	3d c0       	rjmp	.+122    	; 0x602 <DIO_ReadPinValue+0xec>
 588:	50 c0       	rjmp	.+160    	; 0x62a <DIO_ReadPinValue+0x114>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = GET_BIT(PINA,copy_DIO_pin);
 58a:	e9 e3       	ldi	r30, 0x39	; 57
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a9 01       	movw	r20, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_ReadPinValue+0x8c>
 59e:	55 95       	asr	r21
 5a0:	47 95       	ror	r20
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_ReadPinValue+0x88>
 5a6:	ca 01       	movw	r24, r20
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	ec 81       	ldd	r30, Y+4	; 0x04
 5ac:	fd 81       	ldd	r31, Y+5	; 0x05
 5ae:	80 83       	st	Z, r24
 5b0:	41 c0       	rjmp	.+130    	; 0x634 <DIO_ReadPinValue+0x11e>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = GET_BIT(PINB,copy_DIO_pin);
 5b2:	e6 e3       	ldi	r30, 0x36	; 54
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	88 2f       	mov	r24, r24
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	a9 01       	movw	r20, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_ReadPinValue+0xb4>
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_ReadPinValue+0xb0>
 5ce:	ca 01       	movw	r24, r20
 5d0:	81 70       	andi	r24, 0x01	; 1
 5d2:	ec 81       	ldd	r30, Y+4	; 0x04
 5d4:	fd 81       	ldd	r31, Y+5	; 0x05
 5d6:	80 83       	st	Z, r24
 5d8:	2d c0       	rjmp	.+90     	; 0x634 <DIO_ReadPinValue+0x11e>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = GET_BIT(PINC,copy_DIO_pin);
 5da:	e3 e3       	ldi	r30, 0x33	; 51
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	88 2f       	mov	r24, r24
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a9 01       	movw	r20, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_ReadPinValue+0xdc>
 5ee:	55 95       	asr	r21
 5f0:	47 95       	ror	r20
 5f2:	8a 95       	dec	r24
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_ReadPinValue+0xd8>
 5f6:	ca 01       	movw	r24, r20
 5f8:	81 70       	andi	r24, 0x01	; 1
 5fa:	ec 81       	ldd	r30, Y+4	; 0x04
 5fc:	fd 81       	ldd	r31, Y+5	; 0x05
 5fe:	80 83       	st	Z, r24
 600:	19 c0       	rjmp	.+50     	; 0x634 <DIO_ReadPinValue+0x11e>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = GET_BIT(PIND,copy_DIO_pin);
 602:	e0 e3       	ldi	r30, 0x30	; 48
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	88 2f       	mov	r24, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a9 01       	movw	r20, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_ReadPinValue+0x104>
 616:	55 95       	asr	r21
 618:	47 95       	ror	r20
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_ReadPinValue+0x100>
 61e:	ca 01       	movw	r24, r20
 620:	81 70       	andi	r24, 0x01	; 1
 622:	ec 81       	ldd	r30, Y+4	; 0x04
 624:	fd 81       	ldd	r31, Y+5	; 0x05
 626:	80 83       	st	Z, r24
 628:	05 c0       	rjmp	.+10     	; 0x634 <DIO_ReadPinValue+0x11e>
				break;
			default:
				local_errorState = NOT_OK_STAT;
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_ReadPinValue+0x11e>
				break;
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorState;
 634:	89 81       	ldd	r24, Y+1	; 0x01
}
 636:	27 96       	adiw	r28, 0x07	; 7
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	cf 91       	pop	r28
 644:	df 91       	pop	r29
 646:	08 95       	ret

00000648 <DIO_setPortDirection>:

uint8 DIO_setPortDirection(uint8 copy_DIO_port,  uint8 copy_DIO_direction)
{
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	00 d0       	rcall	.+0      	; 0x64e <DIO_setPortDirection+0x6>
 64e:	00 d0       	rcall	.+0      	; 0x650 <DIO_setPortDirection+0x8>
 650:	0f 92       	push	r0
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	8a 83       	std	Y+2, r24	; 0x02
 658:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_direction == PORT_OUTPUT) || (copy_DIO_direction == PORT_INPUT))
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	8f 3f       	cpi	r24, 0xFF	; 255
 662:	19 f0       	breq	.+6      	; 0x66a <DIO_setPortDirection+0x22>
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 23       	and	r24, r24
 668:	a9 f5       	brne	.+106    	; 0x6d4 <DIO_setPortDirection+0x8c>
		{
			switch (copy_DIO_port)
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	3d 83       	std	Y+5, r19	; 0x05
 672:	2c 83       	std	Y+4, r18	; 0x04
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	91 05       	cpc	r25, r1
 67c:	d1 f0       	breq	.+52     	; 0x6b2 <DIO_setPortDirection+0x6a>
 67e:	2c 81       	ldd	r18, Y+4	; 0x04
 680:	3d 81       	ldd	r19, Y+5	; 0x05
 682:	22 30       	cpi	r18, 0x02	; 2
 684:	31 05       	cpc	r19, r1
 686:	2c f4       	brge	.+10     	; 0x692 <DIO_setPortDirection+0x4a>
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	00 97       	sbiw	r24, 0x00	; 0
 68e:	61 f0       	breq	.+24     	; 0x6a8 <DIO_setPortDirection+0x60>
 690:	1f c0       	rjmp	.+62     	; 0x6d0 <DIO_setPortDirection+0x88>
 692:	2c 81       	ldd	r18, Y+4	; 0x04
 694:	3d 81       	ldd	r19, Y+5	; 0x05
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	81 f0       	breq	.+32     	; 0x6bc <DIO_setPortDirection+0x74>
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	83 30       	cpi	r24, 0x03	; 3
 6a2:	91 05       	cpc	r25, r1
 6a4:	81 f0       	breq	.+32     	; 0x6c6 <DIO_setPortDirection+0x7e>
 6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <DIO_setPortDirection+0x88>
			{
				case DIO_PORTA:
					DDRA = copy_DIO_direction;
 6a8:	ea e3       	ldi	r30, 0x3A	; 58
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	80 83       	st	Z, r24
 6b0:	11 c0       	rjmp	.+34     	; 0x6d4 <DIO_setPortDirection+0x8c>
					break;
				case DIO_PORTB:
					DDRB = copy_DIO_direction;
 6b2:	e7 e3       	ldi	r30, 0x37	; 55
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	80 83       	st	Z, r24
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <DIO_setPortDirection+0x8c>
					break;
				case DIO_PORTC:
					DDRC = copy_DIO_direction;
 6bc:	e4 e3       	ldi	r30, 0x34	; 52
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	80 83       	st	Z, r24
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <DIO_setPortDirection+0x8c>
					break;
				case DIO_PORTD:
					DDRD = copy_DIO_direction;
 6c6:	e1 e3       	ldi	r30, 0x31	; 49
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	80 83       	st	Z, r24
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_setPortDirection+0x8c>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
		}
	return local_errorSignal;
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	cf 91       	pop	r28
 6e2:	df 91       	pop	r29
 6e4:	08 95       	ret

000006e6 <DIO_setPortValue>:

uint8 DIO_setPortValue(uint8 copy_DIO_port, uint8 copy_DIO_value)
{
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	00 d0       	rcall	.+0      	; 0x6ec <DIO_setPortValue+0x6>
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <DIO_setPortValue+0x8>
 6ee:	0f 92       	push	r0
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	8a 83       	std	Y+2, r24	; 0x02
 6f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_DIO_port)
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	3d 83       	std	Y+5, r19	; 0x05
 704:	2c 83       	std	Y+4, r18	; 0x04
 706:	8c 81       	ldd	r24, Y+4	; 0x04
 708:	9d 81       	ldd	r25, Y+5	; 0x05
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	91 05       	cpc	r25, r1
 70e:	d1 f0       	breq	.+52     	; 0x744 <DIO_setPortValue+0x5e>
 710:	2c 81       	ldd	r18, Y+4	; 0x04
 712:	3d 81       	ldd	r19, Y+5	; 0x05
 714:	22 30       	cpi	r18, 0x02	; 2
 716:	31 05       	cpc	r19, r1
 718:	2c f4       	brge	.+10     	; 0x724 <DIO_setPortValue+0x3e>
 71a:	8c 81       	ldd	r24, Y+4	; 0x04
 71c:	9d 81       	ldd	r25, Y+5	; 0x05
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	61 f0       	breq	.+24     	; 0x73a <DIO_setPortValue+0x54>
 722:	1f c0       	rjmp	.+62     	; 0x762 <DIO_setPortValue+0x7c>
 724:	2c 81       	ldd	r18, Y+4	; 0x04
 726:	3d 81       	ldd	r19, Y+5	; 0x05
 728:	22 30       	cpi	r18, 0x02	; 2
 72a:	31 05       	cpc	r19, r1
 72c:	81 f0       	breq	.+32     	; 0x74e <DIO_setPortValue+0x68>
 72e:	8c 81       	ldd	r24, Y+4	; 0x04
 730:	9d 81       	ldd	r25, Y+5	; 0x05
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	91 05       	cpc	r25, r1
 736:	81 f0       	breq	.+32     	; 0x758 <DIO_setPortValue+0x72>
 738:	14 c0       	rjmp	.+40     	; 0x762 <DIO_setPortValue+0x7c>
	{
		case DIO_PORTA:
			PORTA = copy_DIO_value;
 73a:	eb e3       	ldi	r30, 0x3B	; 59
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	8b 81       	ldd	r24, Y+3	; 0x03
 740:	80 83       	st	Z, r24
 742:	11 c0       	rjmp	.+34     	; 0x766 <DIO_setPortValue+0x80>
			break;
		case DIO_PORTB:
			PORTB = copy_DIO_value;
 744:	e8 e3       	ldi	r30, 0x38	; 56
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	80 83       	st	Z, r24
 74c:	0c c0       	rjmp	.+24     	; 0x766 <DIO_setPortValue+0x80>
			break;
		case DIO_PORTC:
			PORTC = copy_DIO_value;
 74e:	e5 e3       	ldi	r30, 0x35	; 53
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	80 83       	st	Z, r24
 756:	07 c0       	rjmp	.+14     	; 0x766 <DIO_setPortValue+0x80>
			break;
		case DIO_PORTD:
			PORTD = copy_DIO_value;
 758:	e2 e3       	ldi	r30, 0x32	; 50
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	80 83       	st	Z, r24
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_setPortValue+0x80>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
 766:	89 81       	ldd	r24, Y+1	; 0x01
}
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <DIO_ReadPortValue>:

uint8 DIO_ReadPortValue(uint8 copy_DIO_port,  uint8 *copy_DIO_pValue)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	00 d0       	rcall	.+0      	; 0x77e <DIO_ReadPortValue+0x6>
 77e:	00 d0       	rcall	.+0      	; 0x780 <DIO_ReadPortValue+0x8>
 780:	00 d0       	rcall	.+0      	; 0x782 <DIO_ReadPortValue+0xa>
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	8a 83       	std	Y+2, r24	; 0x02
 788:	7c 83       	std	Y+4, r23	; 0x04
 78a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_port <= DIO_PORTD) && (copy_DIO_pValue != NULL))
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	84 30       	cpi	r24, 0x04	; 4
 794:	08 f0       	brcs	.+2      	; 0x798 <DIO_ReadPortValue+0x20>
 796:	41 c0       	rjmp	.+130    	; 0x81a <DIO_ReadPortValue+0xa2>
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	e9 f1       	breq	.+122    	; 0x81a <DIO_ReadPortValue+0xa2>
	{
		switch (copy_DIO_port)
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	3e 83       	std	Y+6, r19	; 0x06
 7a8:	2d 83       	std	Y+5, r18	; 0x05
 7aa:	8d 81       	ldd	r24, Y+5	; 0x05
 7ac:	9e 81       	ldd	r25, Y+6	; 0x06
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	91 05       	cpc	r25, r1
 7b2:	e1 f0       	breq	.+56     	; 0x7ec <DIO_ReadPortValue+0x74>
 7b4:	2d 81       	ldd	r18, Y+5	; 0x05
 7b6:	3e 81       	ldd	r19, Y+6	; 0x06
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	31 05       	cpc	r19, r1
 7bc:	2c f4       	brge	.+10     	; 0x7c8 <DIO_ReadPortValue+0x50>
 7be:	8d 81       	ldd	r24, Y+5	; 0x05
 7c0:	9e 81       	ldd	r25, Y+6	; 0x06
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	61 f0       	breq	.+24     	; 0x7de <DIO_ReadPortValue+0x66>
 7c6:	27 c0       	rjmp	.+78     	; 0x816 <DIO_ReadPortValue+0x9e>
 7c8:	2d 81       	ldd	r18, Y+5	; 0x05
 7ca:	3e 81       	ldd	r19, Y+6	; 0x06
 7cc:	22 30       	cpi	r18, 0x02	; 2
 7ce:	31 05       	cpc	r19, r1
 7d0:	a1 f0       	breq	.+40     	; 0x7fa <DIO_ReadPortValue+0x82>
 7d2:	8d 81       	ldd	r24, Y+5	; 0x05
 7d4:	9e 81       	ldd	r25, Y+6	; 0x06
 7d6:	83 30       	cpi	r24, 0x03	; 3
 7d8:	91 05       	cpc	r25, r1
 7da:	b1 f0       	breq	.+44     	; 0x808 <DIO_ReadPortValue+0x90>
 7dc:	1c c0       	rjmp	.+56     	; 0x816 <DIO_ReadPortValue+0x9e>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = PINA;
 7de:	e9 e3       	ldi	r30, 0x39	; 57
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	eb 81       	ldd	r30, Y+3	; 0x03
 7e6:	fc 81       	ldd	r31, Y+4	; 0x04
 7e8:	80 83       	st	Z, r24
 7ea:	17 c0       	rjmp	.+46     	; 0x81a <DIO_ReadPortValue+0xa2>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = PINB;
 7ec:	e6 e3       	ldi	r30, 0x36	; 54
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	eb 81       	ldd	r30, Y+3	; 0x03
 7f4:	fc 81       	ldd	r31, Y+4	; 0x04
 7f6:	80 83       	st	Z, r24
 7f8:	10 c0       	rjmp	.+32     	; 0x81a <DIO_ReadPortValue+0xa2>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = PINC;
 7fa:	e3 e3       	ldi	r30, 0x33	; 51
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	eb 81       	ldd	r30, Y+3	; 0x03
 802:	fc 81       	ldd	r31, Y+4	; 0x04
 804:	80 83       	st	Z, r24
 806:	09 c0       	rjmp	.+18     	; 0x81a <DIO_ReadPortValue+0xa2>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = PIND;
 808:	e0 e3       	ldi	r30, 0x30	; 48
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	eb 81       	ldd	r30, Y+3	; 0x03
 810:	fc 81       	ldd	r31, Y+4	; 0x04
 812:	80 83       	st	Z, r24
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_ReadPortValue+0xa2>
				break;
			default:
				local_errorSignal = NOT_OK_STAT;
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}

	return local_errorSignal;
 81a:	89 81       	ldd	r24, Y+1	; 0x01
}
 81c:	26 96       	adiw	r28, 0x06	; 6
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <DIO_setIntPullUpRes>:

uint8 DIO_setIntPullUpRes(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	00 d0       	rcall	.+0      	; 0x834 <DIO_setIntPullUpRes+0x6>
 834:	0f 92       	push	r0
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	8a 83       	std	Y+2, r24	; 0x02
 83c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinDirection(copy_DIO_port,copy_DIO_pin,INPUT);
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	6b 81       	ldd	r22, Y+3	; 0x03
 846:	40 e0       	ldi	r20, 0x00	; 0
 848:	0e 94 65 00 	call	0xca	; 0xca <DIO_setPinDirection>
 84c:	89 83       	std	Y+1, r24	; 0x01
	if (local_errorSignal == OK_STAT)
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	31 f4       	brne	.+12     	; 0x860 <__stack+0x1>
	{
		local_errorSignal = DIO_setPinValue(copy_DIO_port,copy_DIO_pin,HIGH);
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	6b 81       	ldd	r22, Y+3	; 0x03
 858:	41 e0       	ldi	r20, 0x01	; 1
 85a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_setPinValue>
 85e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
 860:	89 81       	ldd	r24, Y+1	; 0x01
}
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	cf 91       	pop	r28
 86a:	df 91       	pop	r29
 86c:	08 95       	ret

0000086e <setCallBack_ADC>:
void (*ADC_ptrFun)(void) = NULL;



void setCallBack_ADC(void (*funcPtr)(void))
{
 86e:	df 93       	push	r29
 870:	cf 93       	push	r28
 872:	00 d0       	rcall	.+0      	; 0x874 <setCallBack_ADC+0x6>
 874:	cd b7       	in	r28, 0x3d	; 61
 876:	de b7       	in	r29, 0x3e	; 62
 878:	9a 83       	std	Y+2, r25	; 0x02
 87a:	89 83       	std	Y+1, r24	; 0x01
	ADC_ptrFun = funcPtr;
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	9a 81       	ldd	r25, Y+2	; 0x02
 880:	90 93 6d 00 	sts	0x006D, r25
 884:	80 93 6c 00 	sts	0x006C, r24
}
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <ADC_init>:
}
*/


void ADC_init(void)
{
 892:	df 93       	push	r29
 894:	cf 93       	push	r28
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
	/* AREF CONFIGURATIONS */
#if (ADMUX_AREF_CFG == ADMUX_AREF)
	CLEAR_BIT(ADMUX,ADMUX_REFS1);
	CLEAR_BIT(ADMUX,ADMUX_REFS0);
#elif (ADMUX_AREF_CFG == ADMUX_AVRE_AVCC)
	CLEAR_BIT(ADMUX,ADMUX_REFS1);
 89a:	a7 e2       	ldi	r26, 0x27	; 39
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e7 e2       	ldi	r30, 0x27	; 39
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	8f 77       	andi	r24, 0x7F	; 127
 8a6:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
 8a8:	a7 e2       	ldi	r26, 0x27	; 39
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	e7 e2       	ldi	r30, 0x27	; 39
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 64       	ori	r24, 0x40	; 64
 8b4:	8c 93       	st	X, r24
#error "WRONG AREF CONFIGURATIONS , PLEASE CHOOSE CORRECT ONES !!"
#endif

	/* ADLAR CONFIGURATION */
#if (ADLAR_CFG == LEFT_ADJUST)
	SET_BIT(ADMUX,ADMUX_ADLAR);
 8b6:	a7 e2       	ldi	r26, 0x27	; 39
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e7 e2       	ldi	r30, 0x27	; 39
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	80 62       	ori	r24, 0x20	; 32
 8c2:	8c 93       	st	X, r24
#error "WRONG ADLAR CONFIGURATIONS , PLEASE CHOOSE CORRECT ONES !!"
#endif

	/* Conversion type configuration */
#if (CONVERSION_TYPE == SINGLE_CONVERSION)
	CLEAR_BIT(ADCSRA,ADCSRA_ADATE);
 8c4:	a6 e2       	ldi	r26, 0x26	; 38
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	e6 e2       	ldi	r30, 0x26	; 38
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	8f 7d       	andi	r24, 0xDF	; 223
 8d0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADATE);
#endif

	/*Interrupt configurations*/
#if(ADC_INT_STATUS == ADC_INT_DISABLE)
	CLEAR_BIT(ADCSRA,ADCSRA_ADIE);
 8d2:	a6 e2       	ldi	r26, 0x26	; 38
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	e6 e2       	ldi	r30, 0x26	; 38
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	87 7f       	andi	r24, 0xF7	; 247
 8de:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#else
#error "WRONG ADC INTERRUPT CONFIGURATIONS , PLEASE CHOOSE CORRECT ONES !!"
#endif
	/* PreScaling */
	ADCSRA |= DF128_MASK;
 8e0:	a6 e2       	ldi	r26, 0x26	; 38
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e6 e2       	ldi	r30, 0x26	; 38
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	87 60       	ori	r24, 0x07	; 7
 8ec:	8c 93       	st	X, r24

	/* ENABLE ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
 8ee:	a6 e2       	ldi	r26, 0x26	; 38
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e6 e2       	ldi	r30, 0x26	; 38
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	8c 93       	st	X, r24
}
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <ADC_startConversionSync>:

uint8 ADC_startConversionSync(uint8 copy_ADC_channels, uint8 *copy_ADC_data)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	28 97       	sbiw	r28, 0x08	; 8
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	8e 83       	std	Y+6, r24	; 0x06
 918:	78 87       	std	Y+8, r23	; 0x08
 91a:	6f 83       	std	Y+7, r22	; 0x07
	uint8 local_errorState = OK_STAT;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	8d 83       	std	Y+5, r24	; 0x05
	uint32 global_ADC_timeOut = 0;
 920:	19 82       	std	Y+1, r1	; 0x01
 922:	1a 82       	std	Y+2, r1	; 0x02
 924:	1b 82       	std	Y+3, r1	; 0x03
 926:	1c 82       	std	Y+4, r1	; 0x04
	if (ADC_available == ADC_IDLE)
 928:	80 91 60 00 	lds	r24, 0x0060
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	09 f0       	breq	.+2      	; 0x932 <ADC_startConversionSync+0x30>
 930:	61 c0       	rjmp	.+194    	; 0x9f4 <ADC_startConversionSync+0xf2>
	{
		if (copy_ADC_data != NULL)
 932:	8f 81       	ldd	r24, Y+7	; 0x07
 934:	98 85       	ldd	r25, Y+8	; 0x08
 936:	00 97       	sbiw	r24, 0x00	; 0
 938:	09 f4       	brne	.+2      	; 0x93c <ADC_startConversionSync+0x3a>
 93a:	5a c0       	rjmp	.+180    	; 0x9f0 <ADC_startConversionSync+0xee>
			{
				ADMUX &= 0b11100000;
 93c:	a7 e2       	ldi	r26, 0x27	; 39
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e7 e2       	ldi	r30, 0x27	; 39
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	80 7e       	andi	r24, 0xE0	; 224
 948:	8c 93       	st	X, r24
				ADMUX |= copy_ADC_channels;
 94a:	a7 e2       	ldi	r26, 0x27	; 39
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	e7 e2       	ldi	r30, 0x27	; 39
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	90 81       	ld	r25, Z
 954:	8e 81       	ldd	r24, Y+6	; 0x06
 956:	89 2b       	or	r24, r25
 958:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
 95a:	a6 e2       	ldi	r26, 0x26	; 38
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	e6 e2       	ldi	r30, 0x26	; 38
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	80 64       	ori	r24, 0x40	; 64
 966:	8c 93       	st	X, r24
 968:	0b c0       	rjmp	.+22     	; 0x980 <ADC_startConversionSync+0x7e>
				while ((!GET_BIT(ADCSRA,ADCSRA_ADIF)) && (global_ADC_timeOut < ADC_TIME_OUT))
				{
					global_ADC_timeOut++;
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	9a 81       	ldd	r25, Y+2	; 0x02
 96e:	ab 81       	ldd	r26, Y+3	; 0x03
 970:	bc 81       	ldd	r27, Y+4	; 0x04
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	a1 1d       	adc	r26, r1
 976:	b1 1d       	adc	r27, r1
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	9a 83       	std	Y+2, r25	; 0x02
 97c:	ab 83       	std	Y+3, r26	; 0x03
 97e:	bc 83       	std	Y+4, r27	; 0x04
		if (copy_ADC_data != NULL)
			{
				ADMUX &= 0b11100000;
				ADMUX |= copy_ADC_channels;
				SET_BIT(ADCSRA,ADCSRA_ADSC);
				while ((!GET_BIT(ADCSRA,ADCSRA_ADIF)) && (global_ADC_timeOut < ADC_TIME_OUT))
 980:	e6 e2       	ldi	r30, 0x26	; 38
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	82 95       	swap	r24
 988:	8f 70       	andi	r24, 0x0F	; 15
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	81 70       	andi	r24, 0x01	; 1
 990:	90 70       	andi	r25, 0x00	; 0
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	61 f4       	brne	.+24     	; 0x9ae <ADC_startConversionSync+0xac>
 996:	89 81       	ldd	r24, Y+1	; 0x01
 998:	9a 81       	ldd	r25, Y+2	; 0x02
 99a:	ab 81       	ldd	r26, Y+3	; 0x03
 99c:	bc 81       	ldd	r27, Y+4	; 0x04
 99e:	80 34       	cpi	r24, 0x40	; 64
 9a0:	22 e4       	ldi	r18, 0x42	; 66
 9a2:	92 07       	cpc	r25, r18
 9a4:	2f e0       	ldi	r18, 0x0F	; 15
 9a6:	a2 07       	cpc	r26, r18
 9a8:	20 e0       	ldi	r18, 0x00	; 0
 9aa:	b2 07       	cpc	r27, r18
 9ac:	f0 f2       	brcs	.-68     	; 0x96a <ADC_startConversionSync+0x68>
				{
					global_ADC_timeOut++;
				}
				if (global_ADC_timeOut >= ADC_TIME_OUT)
 9ae:	89 81       	ldd	r24, Y+1	; 0x01
 9b0:	9a 81       	ldd	r25, Y+2	; 0x02
 9b2:	ab 81       	ldd	r26, Y+3	; 0x03
 9b4:	bc 81       	ldd	r27, Y+4	; 0x04
 9b6:	80 34       	cpi	r24, 0x40	; 64
 9b8:	22 e4       	ldi	r18, 0x42	; 66
 9ba:	92 07       	cpc	r25, r18
 9bc:	2f e0       	ldi	r18, 0x0F	; 15
 9be:	a2 07       	cpc	r26, r18
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	b2 07       	cpc	r27, r18
 9c4:	18 f0       	brcs	.+6      	; 0x9cc <ADC_startConversionSync+0xca>
				{
					local_errorState = TIMEOUT;
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	8d 83       	std	Y+5, r24	; 0x05
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <ADC_startConversionSync+0xe4>
				}
				else
				{
					SET_BIT(ADCSRA,ADCSRA_ADIF);
 9cc:	a6 e2       	ldi	r26, 0x26	; 38
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	e6 e2       	ldi	r30, 0x26	; 38
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	80 61       	ori	r24, 0x10	; 16
 9d8:	8c 93       	st	X, r24
					*copy_ADC_data = ADCH;
 9da:	e5 e2       	ldi	r30, 0x25	; 37
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	ef 81       	ldd	r30, Y+7	; 0x07
 9e2:	f8 85       	ldd	r31, Y+8	; 0x08
 9e4:	80 83       	st	Z, r24
				}
				global_ADC_timeOut = 0;
 9e6:	19 82       	std	Y+1, r1	; 0x01
 9e8:	1a 82       	std	Y+2, r1	; 0x02
 9ea:	1b 82       	std	Y+3, r1	; 0x03
 9ec:	1c 82       	std	Y+4, r1	; 0x04
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <ADC_startConversionSync+0xf2>
			}
			else
			{
				local_errorState = NOT_OK_STAT;
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	8d 83       	std	Y+5, r24	; 0x05
			}

	}

	return local_errorState;
 9f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
 9f6:	28 96       	adiw	r28, 0x08	; 8
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	08 95       	ret

00000a08 <ADC_startConversionAsync>:

void ADC_startConversionAsync(uint8 copy_ADC_channels)
{
 a08:	df 93       	push	r29
 a0a:	cf 93       	push	r28
 a0c:	0f 92       	push	r0
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	89 83       	std	Y+1, r24	; 0x01

	if (ADC_available == ADC_IDLE)
 a14:	80 91 60 00 	lds	r24, 0x0060
 a18:	81 30       	cpi	r24, 0x01	; 1
 a1a:	19 f5       	brne	.+70     	; 0xa62 <ADC_startConversionAsync+0x5a>
	{
		global_AsyncStatus = NORMAL_ASYNC;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	80 93 64 00 	sts	0x0064, r24
		ADMUX &= 0b11100000;
 a22:	a7 e2       	ldi	r26, 0x27	; 39
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	e7 e2       	ldi	r30, 0x27	; 39
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	80 7e       	andi	r24, 0xE0	; 224
 a2e:	8c 93       	st	X, r24
		ADMUX |= copy_ADC_channels;
 a30:	a7 e2       	ldi	r26, 0x27	; 39
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	e7 e2       	ldi	r30, 0x27	; 39
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	90 81       	ld	r25, Z
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	89 2b       	or	r24, r25
 a3e:	8c 93       	st	X, r24

		ADC_available = ADC_BUSY;
 a40:	82 e0       	ldi	r24, 0x02	; 2
 a42:	80 93 60 00 	sts	0x0060, r24
		SET_BIT(ADCSRA,ADCSRA_ADSC);
 a46:	a6 e2       	ldi	r26, 0x26	; 38
 a48:	b0 e0       	ldi	r27, 0x00	; 0
 a4a:	e6 e2       	ldi	r30, 0x26	; 38
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	80 64       	ori	r24, 0x40	; 64
 a52:	8c 93       	st	X, r24

		/*enable Interrupt*/

		SET_BIT(ADCSRA,ADCSRA_ADIE);
 a54:	a6 e2       	ldi	r26, 0x26	; 38
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e6 e2       	ldi	r30, 0x26	; 38
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	88 60       	ori	r24, 0x08	; 8
 a60:	8c 93       	st	X, r24
	else
	{

	}

}
 a62:	0f 90       	pop	r0
 a64:	cf 91       	pop	r28
 a66:	df 91       	pop	r29
 a68:	08 95       	ret

00000a6a <ADC_startChainConversionSync>:

uint8 ADC_startChainConversionSync(ADC_chainSync_t *chainSync)
{
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	df 93       	push	r29
 a70:	cf 93       	push	r28
 a72:	00 d0       	rcall	.+0      	; 0xa74 <ADC_startChainConversionSync+0xa>
 a74:	00 d0       	rcall	.+0      	; 0xa76 <ADC_startChainConversionSync+0xc>
 a76:	00 d0       	rcall	.+0      	; 0xa78 <ADC_startChainConversionSync+0xe>
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	9e 83       	std	Y+6, r25	; 0x06
 a7e:	8d 83       	std	Y+5, r24	; 0x05
	uint8 local_errorSignal = OK_STAT;
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	8c 83       	std	Y+4, r24	; 0x04
	uint8 local_counter = 0;
 a84:	1b 82       	std	Y+3, r1	; 0x03
	uint8 *local_ptr = NULL;
 a86:	1a 82       	std	Y+2, r1	; 0x02
 a88:	19 82       	std	Y+1, r1	; 0x01
	for(local_counter = 0; local_counter < MAX_NUM; local_counter++)
 a8a:	1b 82       	std	Y+3, r1	; 0x03
 a8c:	28 c0       	rjmp	.+80     	; 0xade <ADC_startChainConversionSync+0x74>
	{
		local_ptr = &(chainSync->ADC_Reading[local_counter]);
 a8e:	8d 81       	ldd	r24, Y+5	; 0x05
 a90:	9e 81       	ldd	r25, Y+6	; 0x06
 a92:	9c 01       	movw	r18, r24
 a94:	2d 5f       	subi	r18, 0xFD	; 253
 a96:	3f 4f       	sbci	r19, 0xFF	; 255
 a98:	8b 81       	ldd	r24, Y+3	; 0x03
 a9a:	88 2f       	mov	r24, r24
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	82 0f       	add	r24, r18
 aa0:	93 1f       	adc	r25, r19
 aa2:	9a 83       	std	Y+2, r25	; 0x02
 aa4:	89 83       	std	Y+1, r24	; 0x01
		chainSync->ADC_error[local_counter] = ADC_startConversionSync(chainSync->channelID[local_counter],local_ptr);
 aa6:	8b 81       	ldd	r24, Y+3	; 0x03
 aa8:	08 2f       	mov	r16, r24
 aaa:	10 e0       	ldi	r17, 0x00	; 0
 aac:	8b 81       	ldd	r24, Y+3	; 0x03
 aae:	28 2f       	mov	r18, r24
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	8d 81       	ldd	r24, Y+5	; 0x05
 ab4:	9e 81       	ldd	r25, Y+6	; 0x06
 ab6:	fc 01       	movw	r30, r24
 ab8:	e2 0f       	add	r30, r18
 aba:	f3 1f       	adc	r31, r19
 abc:	80 81       	ld	r24, Z
 abe:	29 81       	ldd	r18, Y+1	; 0x01
 ac0:	3a 81       	ldd	r19, Y+2	; 0x02
 ac2:	b9 01       	movw	r22, r18
 ac4:	0e 94 81 04 	call	0x902	; 0x902 <ADC_startConversionSync>
 ac8:	28 2f       	mov	r18, r24
 aca:	8d 81       	ldd	r24, Y+5	; 0x05
 acc:	9e 81       	ldd	r25, Y+6	; 0x06
 ace:	80 0f       	add	r24, r16
 ad0:	91 1f       	adc	r25, r17
 ad2:	fc 01       	movw	r30, r24
 ad4:	36 96       	adiw	r30, 0x06	; 6
 ad6:	20 83       	st	Z, r18
uint8 ADC_startChainConversionSync(ADC_chainSync_t *chainSync)
{
	uint8 local_errorSignal = OK_STAT;
	uint8 local_counter = 0;
	uint8 *local_ptr = NULL;
	for(local_counter = 0; local_counter < MAX_NUM; local_counter++)
 ad8:	8b 81       	ldd	r24, Y+3	; 0x03
 ada:	8f 5f       	subi	r24, 0xFF	; 255
 adc:	8b 83       	std	Y+3, r24	; 0x03
 ade:	8b 81       	ldd	r24, Y+3	; 0x03
 ae0:	83 30       	cpi	r24, 0x03	; 3
 ae2:	a8 f2       	brcs	.-86     	; 0xa8e <ADC_startChainConversionSync+0x24>
	{
		local_ptr = &(chainSync->ADC_Reading[local_counter]);
		chainSync->ADC_error[local_counter] = ADC_startConversionSync(chainSync->channelID[local_counter],local_ptr);
	}

	return local_errorSignal;
 ae4:	8c 81       	ldd	r24, Y+4	; 0x04
}
 ae6:	26 96       	adiw	r28, 0x06	; 6
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <ADC_startChainConversionAsync>:

void ADC_startChainConversionAsync(ADC_chainAsync_t *chainAsync)
{
 afc:	df 93       	push	r29
 afe:	cf 93       	push	r28
 b00:	00 d0       	rcall	.+0      	; 0xb02 <ADC_startChainConversionAsync+0x6>
 b02:	cd b7       	in	r28, 0x3d	; 61
 b04:	de b7       	in	r29, 0x3e	; 62
 b06:	9a 83       	std	Y+2, r25	; 0x02
 b08:	89 83       	std	Y+1, r24	; 0x01
	if ((ADC_available == ADC_IDLE))
 b0a:	80 91 60 00 	lds	r24, 0x0060
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	e9 f5       	brne	.+122    	; 0xb8c <ADC_startChainConversionAsync+0x90>
		{
			GENERAL_INTERRUPT_enableInterrupt();
 b12:	0e 94 49 00 	call	0x92	; 0x92 <GENERAL_INTERRUPT_enableInterrupt>
			global_AsyncStatus = CHAIN_ASYNC;
 b16:	82 e0       	ldi	r24, 0x02	; 2
 b18:	80 93 64 00 	sts	0x0064, r24
			ChainChannelID = chainAsync->channelID;
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
 b1e:	9a 81       	ldd	r25, Y+2	; 0x02
 b20:	90 93 66 00 	sts	0x0066, r25
 b24:	80 93 65 00 	sts	0x0065, r24
			ChainReadig = chainAsync->ADC_Reading;
 b28:	89 81       	ldd	r24, Y+1	; 0x01
 b2a:	9a 81       	ldd	r25, Y+2	; 0x02
 b2c:	03 96       	adiw	r24, 0x03	; 3
 b2e:	90 93 68 00 	sts	0x0068, r25
 b32:	80 93 67 00 	sts	0x0067, r24
			//chainAsync->pfADC_CallBack = ADC_ptrFun;

			ADMUX &= 0b11100000;
 b36:	a7 e2       	ldi	r26, 0x27	; 39
 b38:	b0 e0       	ldi	r27, 0x00	; 0
 b3a:	e7 e2       	ldi	r30, 0x27	; 39
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	80 81       	ld	r24, Z
 b40:	80 7e       	andi	r24, 0xE0	; 224
 b42:	8c 93       	st	X, r24
			ADMUX |= ChainChannelID[ChainAsyncIndex];
 b44:	a7 e2       	ldi	r26, 0x27	; 39
 b46:	b0 e0       	ldi	r27, 0x00	; 0
 b48:	e7 e2       	ldi	r30, 0x27	; 39
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	40 81       	ld	r20, Z
 b4e:	20 91 65 00 	lds	r18, 0x0065
 b52:	30 91 66 00 	lds	r19, 0x0066
 b56:	80 91 6b 00 	lds	r24, 0x006B
 b5a:	88 2f       	mov	r24, r24
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	f9 01       	movw	r30, r18
 b60:	e8 0f       	add	r30, r24
 b62:	f9 1f       	adc	r31, r25
 b64:	80 81       	ld	r24, Z
 b66:	84 2b       	or	r24, r20
 b68:	8c 93       	st	X, r24
			ADC_available = ADC_BUSY;
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	80 93 60 00 	sts	0x0060, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 b70:	a6 e2       	ldi	r26, 0x26	; 38
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	e6 e2       	ldi	r30, 0x26	; 38
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	80 64       	ori	r24, 0x40	; 64
 b7c:	8c 93       	st	X, r24

			/*enable Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 b7e:	a6 e2       	ldi	r26, 0x26	; 38
 b80:	b0 e0       	ldi	r27, 0x00	; 0
 b82:	e6 e2       	ldi	r30, 0x26	; 38
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	80 81       	ld	r24, Z
 b88:	88 60       	ori	r24, 0x08	; 8
 b8a:	8c 93       	st	X, r24
		else
		{

		}

}
 b8c:	0f 90       	pop	r0
 b8e:	0f 90       	pop	r0
 b90:	cf 91       	pop	r28
 b92:	df 91       	pop	r29
 b94:	08 95       	ret

00000b96 <__vector_16>:
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
 b96:	1f 92       	push	r1
 b98:	0f 92       	push	r0
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	0f 92       	push	r0
 b9e:	11 24       	eor	r1, r1
 ba0:	2f 93       	push	r18
 ba2:	3f 93       	push	r19
 ba4:	4f 93       	push	r20
 ba6:	5f 93       	push	r21
 ba8:	6f 93       	push	r22
 baa:	7f 93       	push	r23
 bac:	8f 93       	push	r24
 bae:	9f 93       	push	r25
 bb0:	af 93       	push	r26
 bb2:	bf 93       	push	r27
 bb4:	ef 93       	push	r30
 bb6:	ff 93       	push	r31
 bb8:	df 93       	push	r29
 bba:	cf 93       	push	r28
 bbc:	cd b7       	in	r28, 0x3d	; 61
 bbe:	de b7       	in	r29, 0x3e	; 62
if (global_AsyncStatus == NORMAL_ASYNC)
 bc0:	80 91 64 00 	lds	r24, 0x0064
 bc4:	81 30       	cpi	r24, 0x01	; 1
 bc6:	c1 f4       	brne	.+48     	; 0xbf8 <__vector_16+0x62>
	{
		*ADC_value = ADCH;
 bc8:	a0 91 62 00 	lds	r26, 0x0062
 bcc:	b0 91 63 00 	lds	r27, 0x0063
 bd0:	e5 e2       	ldi	r30, 0x25	; 37
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	8c 93       	st	X, r24
		ADC_ptrFun();
 bd8:	e0 91 6c 00 	lds	r30, 0x006C
 bdc:	f0 91 6d 00 	lds	r31, 0x006D
 be0:	09 95       	icall
		CLEAR_BIT(ADCSRA,ADCSRA_ADIE);
 be2:	a6 e2       	ldi	r26, 0x26	; 38
 be4:	b0 e0       	ldi	r27, 0x00	; 0
 be6:	e6 e2       	ldi	r30, 0x26	; 38
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	80 81       	ld	r24, Z
 bec:	87 7f       	andi	r24, 0xF7	; 247
 bee:	8c 93       	st	X, r24
		ADC_available = ADC_IDLE;
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	80 93 60 00 	sts	0x0060, r24
 bf6:	50 c0       	rjmp	.+160    	; 0xc98 <__vector_16+0x102>
	}

else if (global_AsyncStatus == CHAIN_ASYNC)
 bf8:	80 91 64 00 	lds	r24, 0x0064
 bfc:	82 30       	cpi	r24, 0x02	; 2
 bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_16+0x6c>
 c00:	4b c0       	rjmp	.+150    	; 0xc98 <__vector_16+0x102>
	{
		ChainReadig[ChainAsyncIndex] = ADCH;
 c02:	20 91 67 00 	lds	r18, 0x0067
 c06:	30 91 68 00 	lds	r19, 0x0068
 c0a:	80 91 6b 00 	lds	r24, 0x006B
 c0e:	88 2f       	mov	r24, r24
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	d9 01       	movw	r26, r18
 c14:	a8 0f       	add	r26, r24
 c16:	b9 1f       	adc	r27, r25
 c18:	e5 e2       	ldi	r30, 0x25	; 37
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	80 81       	ld	r24, Z
 c1e:	8c 93       	st	X, r24
		ADC_ptrFun();
 c20:	e0 91 6c 00 	lds	r30, 0x006C
 c24:	f0 91 6d 00 	lds	r31, 0x006D
 c28:	09 95       	icall

		ChainAsyncIndex++;
 c2a:	80 91 6b 00 	lds	r24, 0x006B
 c2e:	8f 5f       	subi	r24, 0xFF	; 255
 c30:	80 93 6b 00 	sts	0x006B, r24
		if (ChainAsyncIndex == MAX_NUM)
 c34:	80 91 6b 00 	lds	r24, 0x006B
 c38:	83 30       	cpi	r24, 0x03	; 3
 c3a:	69 f4       	brne	.+26     	; 0xc56 <__vector_16+0xc0>
		{

			ADC_available = ADC_IDLE;
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	80 93 60 00 	sts	0x0060, r24
			CLEAR_BIT(ADCSRA,ADCSRA_ADIE);
 c42:	a6 e2       	ldi	r26, 0x26	; 38
 c44:	b0 e0       	ldi	r27, 0x00	; 0
 c46:	e6 e2       	ldi	r30, 0x26	; 38
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	80 81       	ld	r24, Z
 c4c:	87 7f       	andi	r24, 0xF7	; 247
 c4e:	8c 93       	st	X, r24
			//ChainAsyncIndex = 0;
			ChainAsyncIndex = 0;
 c50:	10 92 6b 00 	sts	0x006B, r1
 c54:	21 c0       	rjmp	.+66     	; 0xc98 <__vector_16+0x102>
		}
		else
		{

			ADMUX &= 0b11100000;
 c56:	a7 e2       	ldi	r26, 0x27	; 39
 c58:	b0 e0       	ldi	r27, 0x00	; 0
 c5a:	e7 e2       	ldi	r30, 0x27	; 39
 c5c:	f0 e0       	ldi	r31, 0x00	; 0
 c5e:	80 81       	ld	r24, Z
 c60:	80 7e       	andi	r24, 0xE0	; 224
 c62:	8c 93       	st	X, r24
			ADMUX |= ChainChannelID[ChainAsyncIndex];
 c64:	a7 e2       	ldi	r26, 0x27	; 39
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	e7 e2       	ldi	r30, 0x27	; 39
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	40 81       	ld	r20, Z
 c6e:	20 91 65 00 	lds	r18, 0x0065
 c72:	30 91 66 00 	lds	r19, 0x0066
 c76:	80 91 6b 00 	lds	r24, 0x006B
 c7a:	88 2f       	mov	r24, r24
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	f9 01       	movw	r30, r18
 c80:	e8 0f       	add	r30, r24
 c82:	f9 1f       	adc	r31, r25
 c84:	80 81       	ld	r24, Z
 c86:	84 2b       	or	r24, r20
 c88:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 c8a:	a6 e2       	ldi	r26, 0x26	; 38
 c8c:	b0 e0       	ldi	r27, 0x00	; 0
 c8e:	e6 e2       	ldi	r30, 0x26	; 38
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	80 81       	ld	r24, Z
 c94:	80 64       	ori	r24, 0x40	; 64
 c96:	8c 93       	st	X, r24

		}


	}
}
 c98:	cf 91       	pop	r28
 c9a:	df 91       	pop	r29
 c9c:	ff 91       	pop	r31
 c9e:	ef 91       	pop	r30
 ca0:	bf 91       	pop	r27
 ca2:	af 91       	pop	r26
 ca4:	9f 91       	pop	r25
 ca6:	8f 91       	pop	r24
 ca8:	7f 91       	pop	r23
 caa:	6f 91       	pop	r22
 cac:	5f 91       	pop	r21
 cae:	4f 91       	pop	r20
 cb0:	3f 91       	pop	r19
 cb2:	2f 91       	pop	r18
 cb4:	0f 90       	pop	r0
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	0f 90       	pop	r0
 cba:	1f 90       	pop	r1
 cbc:	18 95       	reti

00000cbe <main>:
ADC_chainAsync_t sensors;

void ADC_ISR(void);

int main(void)
{
 cbe:	df 93       	push	r29
 cc0:	cf 93       	push	r28
 cc2:	cd b7       	in	r28, 0x3d	; 61
 cc4:	de b7       	in	r29, 0x3e	; 62
	DIO_setPortDirection(DIO_PORTB,PORT_OUTPUT);
 cc6:	81 e0       	ldi	r24, 0x01	; 1
 cc8:	6f ef       	ldi	r22, 0xFF	; 255
 cca:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPortDirection>
	DIO_setPortDirection(DIO_PORTC,PORT_OUTPUT);
 cce:	82 e0       	ldi	r24, 0x02	; 2
 cd0:	6f ef       	ldi	r22, 0xFF	; 255
 cd2:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPortDirection>
	DIO_setPortDirection(DIO_PORTD,PORT_OUTPUT);
 cd6:	83 e0       	ldi	r24, 0x03	; 3
 cd8:	6f ef       	ldi	r22, 0xFF	; 255
 cda:	0e 94 24 03 	call	0x648	; 0x648 <DIO_setPortDirection>

	sensors.channelID[0] = ADC0_MASK;
 cde:	10 92 70 00 	sts	0x0070, r1
	sensors.channelID[1] = ADC1_MASK;
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	80 93 71 00 	sts	0x0071, r24
	sensors.channelID[2] = ADC2_MASK;
 ce8:	82 e0       	ldi	r24, 0x02	; 2
 cea:	80 93 72 00 	sts	0x0072, r24

	setCallBack_ADC(ADC_ISR);
 cee:	82 e8       	ldi	r24, 0x82	; 130
 cf0:	96 e0       	ldi	r25, 0x06	; 6
 cf2:	0e 94 37 04 	call	0x86e	; 0x86e <setCallBack_ADC>
	ADC_init();
 cf6:	0e 94 49 04 	call	0x892	; 0x892 <ADC_init>

	while(1)
	{
		ADC_startChainConversionAsync(&sensors);
 cfa:	80 e7       	ldi	r24, 0x70	; 112
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 7e 05 	call	0xafc	; 0xafc <ADC_startChainConversionAsync>
 d02:	fb cf       	rjmp	.-10     	; 0xcfa <main+0x3c>

00000d04 <ADC_ISR>:
	}
}


void ADC_ISR(void)
{
 d04:	df 93       	push	r29
 d06:	cf 93       	push	r28
 d08:	00 d0       	rcall	.+0      	; 0xd0a <ADC_ISR+0x6>
 d0a:	cd b7       	in	r28, 0x3d	; 61
 d0c:	de b7       	in	r29, 0x3e	; 62
	switch (ChainAsyncIndex)
 d0e:	80 91 6b 00 	lds	r24, 0x006B
 d12:	28 2f       	mov	r18, r24
 d14:	30 e0       	ldi	r19, 0x00	; 0
 d16:	3a 83       	std	Y+2, r19	; 0x02
 d18:	29 83       	std	Y+1, r18	; 0x01
 d1a:	89 81       	ldd	r24, Y+1	; 0x01
 d1c:	9a 81       	ldd	r25, Y+2	; 0x02
 d1e:	81 30       	cpi	r24, 0x01	; 1
 d20:	91 05       	cpc	r25, r1
 d22:	81 f0       	breq	.+32     	; 0xd44 <ADC_ISR+0x40>
 d24:	29 81       	ldd	r18, Y+1	; 0x01
 d26:	3a 81       	ldd	r19, Y+2	; 0x02
 d28:	22 30       	cpi	r18, 0x02	; 2
 d2a:	31 05       	cpc	r19, r1
 d2c:	91 f0       	breq	.+36     	; 0xd52 <ADC_ISR+0x4e>
 d2e:	89 81       	ldd	r24, Y+1	; 0x01
 d30:	9a 81       	ldd	r25, Y+2	; 0x02
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	a1 f4       	brne	.+40     	; 0xd5e <ADC_ISR+0x5a>
	{
	 	 case 0:
	 		 DIO_setPortValue(DIO_PORTB,sensors.ADC_Reading[0]);
 d36:	90 91 73 00 	lds	r25, 0x0073
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	69 2f       	mov	r22, r25
 d3e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_setPortValue>
 d42:	0d c0       	rjmp	.+26     	; 0xd5e <ADC_ISR+0x5a>
	 		 break;
	 	 case 1:
	 		DIO_setPortValue(DIO_PORTC,sensors.ADC_Reading[1]);
 d44:	90 91 74 00 	lds	r25, 0x0074
 d48:	82 e0       	ldi	r24, 0x02	; 2
 d4a:	69 2f       	mov	r22, r25
 d4c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_setPortValue>
 d50:	06 c0       	rjmp	.+12     	; 0xd5e <ADC_ISR+0x5a>
	 		break;
	 	 case 2:
	 		DIO_setPortValue(DIO_PORTD,sensors.ADC_Reading[2]);
 d52:	90 91 75 00 	lds	r25, 0x0075
 d56:	83 e0       	ldi	r24, 0x03	; 3
 d58:	69 2f       	mov	r22, r25
 d5a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_setPortValue>
	 		break;
	 	 default:;
	}

}
 d5e:	0f 90       	pop	r0
 d60:	0f 90       	pop	r0
 d62:	cf 91       	pop	r28
 d64:	df 91       	pop	r29
 d66:	08 95       	ret

00000d68 <_exit>:
 d68:	f8 94       	cli

00000d6a <__stop_program>:
 d6a:	ff cf       	rjmp	.-2      	; 0xd6a <__stop_program>
