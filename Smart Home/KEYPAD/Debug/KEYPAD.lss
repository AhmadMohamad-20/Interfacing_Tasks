
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00000a24  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e4  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019e  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000997  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 00006be5  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00008b5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 04 	call	0x94e	; 0x94e <main>
  8a:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_initalizePorts>:
#include "DIO_cfg.h"
#include "DIO_Private.h"
#include "DIO_interface.h"

void DIO_initalizePorts()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
  a0:	e7 e3       	ldi	r30, 0x37	; 55
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
  a6:	e4 e3       	ldi	r30, 0x34	; 52
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
  ae:	e1 e3       	ldi	r30, 0x31	; 49
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	PORTA = PORTA_VALUE;
  b4:	eb e3       	ldi	r30, 0x3B	; 59
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	PORTB = PORTB_VALUE;
  ba:	e8 e3       	ldi	r30, 0x38	; 56
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	PORTC = PORTC_VALUE;
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	80 83       	st	Z, r24
	PORTD = PORTD_VALUE;
  c8:	e2 e3       	ldi	r30, 0x32	; 50
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
}
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <DIO_setPinDirection>:
#include "DIO_Private.h"
#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_setPinDirection(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_direction)
{
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	28 97       	sbiw	r28, 0x08	; 8
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
  ec:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	08 f0       	brcs	.+2      	; 0xfa <DIO_setPinDirection+0x26>
  f8:	f1 c0       	rjmp	.+482    	; 0x2dc <DIO_setPinDirection+0x208>
	{
		if (copy_DIO_direction == OUTPUT)
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f0       	breq	.+2      	; 0x102 <DIO_setPinDirection+0x2e>
 100:	71 c0       	rjmp	.+226    	; 0x1e4 <DIO_setPinDirection+0x110>
		{
			switch (copy_DIO_port)
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	38 87       	std	Y+8, r19	; 0x08
 10a:	2f 83       	std	Y+7, r18	; 0x07
 10c:	8f 81       	ldd	r24, Y+7	; 0x07
 10e:	98 85       	ldd	r25, Y+8	; 0x08
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	49 f1       	breq	.+82     	; 0x168 <DIO_setPinDirection+0x94>
 116:	2f 81       	ldd	r18, Y+7	; 0x07
 118:	38 85       	ldd	r19, Y+8	; 0x08
 11a:	22 30       	cpi	r18, 0x02	; 2
 11c:	31 05       	cpc	r19, r1
 11e:	2c f4       	brge	.+10     	; 0x12a <DIO_setPinDirection+0x56>
 120:	8f 81       	ldd	r24, Y+7	; 0x07
 122:	98 85       	ldd	r25, Y+8	; 0x08
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	61 f0       	breq	.+24     	; 0x140 <DIO_setPinDirection+0x6c>
 128:	5b c0       	rjmp	.+182    	; 0x1e0 <DIO_setPinDirection+0x10c>
 12a:	2f 81       	ldd	r18, Y+7	; 0x07
 12c:	38 85       	ldd	r19, Y+8	; 0x08
 12e:	22 30       	cpi	r18, 0x02	; 2
 130:	31 05       	cpc	r19, r1
 132:	71 f1       	breq	.+92     	; 0x190 <DIO_setPinDirection+0xbc>
 134:	8f 81       	ldd	r24, Y+7	; 0x07
 136:	98 85       	ldd	r25, Y+8	; 0x08
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	e9 f1       	breq	.+122    	; 0x1b8 <DIO_setPinDirection+0xe4>
 13e:	50 c0       	rjmp	.+160    	; 0x1e0 <DIO_setPinDirection+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(DDRA,copy_DIO_pin);
 140:	aa e3       	ldi	r26, 0x3A	; 58
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_setPinDirection+0x8a>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_setPinDirection+0x86>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	bb c0       	rjmp	.+374    	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(DDRB,copy_DIO_pin);
 168:	a7 e3       	ldi	r26, 0x37	; 55
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e7 e3       	ldi	r30, 0x37	; 55
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_setPinDirection+0xb2>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_setPinDirection+0xae>
 18a:	84 2b       	or	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	a7 c0       	rjmp	.+334    	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(DDRC,copy_DIO_pin);
 190:	a4 e3       	ldi	r26, 0x34	; 52
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e4 e3       	ldi	r30, 0x34	; 52
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_setPinDirection+0xda>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_setPinDirection+0xd6>
 1b2:	84 2b       	or	r24, r20
 1b4:	8c 93       	st	X, r24
 1b6:	93 c0       	rjmp	.+294    	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(DDRD,copy_DIO_pin);
 1b8:	a1 e3       	ldi	r26, 0x31	; 49
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e1 e3       	ldi	r30, 0x31	; 49
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 2e       	mov	r0, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_setPinDirection+0x102>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_setPinDirection+0xfe>
 1da:	84 2b       	or	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	7f c0       	rjmp	.+254    	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
 1e0:	19 82       	std	Y+1, r1	; 0x01
 1e2:	7d c0       	rjmp	.+250    	; 0x2de <DIO_setPinDirection+0x20a>
			}
		}
		else if (copy_DIO_direction == INPUT)
 1e4:	8c 81       	ldd	r24, Y+4	; 0x04
 1e6:	88 23       	and	r24, r24
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_setPinDirection+0x118>
 1ea:	76 c0       	rjmp	.+236    	; 0x2d8 <DIO_setPinDirection+0x204>
		{
			switch (copy_DIO_port)
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	3e 83       	std	Y+6, r19	; 0x06
 1f4:	2d 83       	std	Y+5, r18	; 0x05
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	9e 81       	ldd	r25, Y+6	; 0x06
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 05       	cpc	r25, r1
 1fe:	59 f1       	breq	.+86     	; 0x256 <DIO_setPinDirection+0x182>
 200:	2d 81       	ldd	r18, Y+5	; 0x05
 202:	3e 81       	ldd	r19, Y+6	; 0x06
 204:	22 30       	cpi	r18, 0x02	; 2
 206:	31 05       	cpc	r19, r1
 208:	2c f4       	brge	.+10     	; 0x214 <DIO_setPinDirection+0x140>
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
 20c:	9e 81       	ldd	r25, Y+6	; 0x06
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	69 f0       	breq	.+26     	; 0x22c <DIO_setPinDirection+0x158>
 212:	60 c0       	rjmp	.+192    	; 0x2d4 <DIO_setPinDirection+0x200>
 214:	2d 81       	ldd	r18, Y+5	; 0x05
 216:	3e 81       	ldd	r19, Y+6	; 0x06
 218:	22 30       	cpi	r18, 0x02	; 2
 21a:	31 05       	cpc	r19, r1
 21c:	89 f1       	breq	.+98     	; 0x280 <DIO_setPinDirection+0x1ac>
 21e:	8d 81       	ldd	r24, Y+5	; 0x05
 220:	9e 81       	ldd	r25, Y+6	; 0x06
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	91 05       	cpc	r25, r1
 226:	09 f4       	brne	.+2      	; 0x22a <DIO_setPinDirection+0x156>
 228:	40 c0       	rjmp	.+128    	; 0x2aa <DIO_setPinDirection+0x1d6>
 22a:	54 c0       	rjmp	.+168    	; 0x2d4 <DIO_setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA,copy_DIO_pin);
 22c:	aa e3       	ldi	r26, 0x3A	; 58
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	ea e3       	ldi	r30, 0x3A	; 58
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_setPinDirection+0x176>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_setPinDirection+0x172>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8c 93       	st	X, r24
 254:	44 c0       	rjmp	.+136    	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(DDRB,copy_DIO_pin);
 256:	a7 e3       	ldi	r26, 0x37	; 55
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e7 e3       	ldi	r30, 0x37	; 55
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_setPinDirection+0x1a0>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_setPinDirection+0x19c>
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8c 93       	st	X, r24
 27e:	2f c0       	rjmp	.+94     	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(DDRC,copy_DIO_pin);
 280:	a4 e3       	ldi	r26, 0x34	; 52
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e4 e3       	ldi	r30, 0x34	; 52
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	48 2f       	mov	r20, r24
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 2e       	mov	r0, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_setPinDirection+0x1ca>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_setPinDirection+0x1c6>
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	8c 93       	st	X, r24
 2a8:	1a c0       	rjmp	.+52     	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(DDRD,copy_DIO_pin);
 2aa:	a1 e3       	ldi	r26, 0x31	; 49
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	e1 e3       	ldi	r30, 0x31	; 49
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	48 2f       	mov	r20, r24
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 2e       	mov	r0, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_setPinDirection+0x1f4>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_setPinDirection+0x1f0>
 2cc:	80 95       	com	r24
 2ce:	84 23       	and	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
 2d4:	19 82       	std	Y+1, r1	; 0x01
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <DIO_setPinDirection+0x20a>
			}
		}
		else
		{
			local_errorState = NOT_OK_STAT;
 2d8:	19 82       	std	Y+1, r1	; 0x01
 2da:	01 c0       	rjmp	.+2      	; 0x2de <DIO_setPinDirection+0x20a>
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
 2dc:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorState;
 2de:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e0:	28 96       	adiw	r28, 0x08	; 8
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <DIO_setPinValue>:

uint8 DIO_setPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_value)
{
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	28 97       	sbiw	r28, 0x08	; 8
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	8a 83       	std	Y+2, r24	; 0x02
 308:	6b 83       	std	Y+3, r22	; 0x03
 30a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	08 f0       	brcs	.+2      	; 0x318 <DIO_setPinValue+0x26>
 316:	f1 c0       	rjmp	.+482    	; 0x4fa <DIO_setPinValue+0x208>
	{
		if (copy_DIO_value == HIGH)
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	09 f0       	breq	.+2      	; 0x320 <DIO_setPinValue+0x2e>
 31e:	71 c0       	rjmp	.+226    	; 0x402 <DIO_setPinValue+0x110>
		{
			switch(copy_DIO_port)
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	38 87       	std	Y+8, r19	; 0x08
 328:	2f 83       	std	Y+7, r18	; 0x07
 32a:	8f 81       	ldd	r24, Y+7	; 0x07
 32c:	98 85       	ldd	r25, Y+8	; 0x08
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	49 f1       	breq	.+82     	; 0x386 <DIO_setPinValue+0x94>
 334:	2f 81       	ldd	r18, Y+7	; 0x07
 336:	38 85       	ldd	r19, Y+8	; 0x08
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	2c f4       	brge	.+10     	; 0x348 <DIO_setPinValue+0x56>
 33e:	8f 81       	ldd	r24, Y+7	; 0x07
 340:	98 85       	ldd	r25, Y+8	; 0x08
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	61 f0       	breq	.+24     	; 0x35e <DIO_setPinValue+0x6c>
 346:	5b c0       	rjmp	.+182    	; 0x3fe <DIO_setPinValue+0x10c>
 348:	2f 81       	ldd	r18, Y+7	; 0x07
 34a:	38 85       	ldd	r19, Y+8	; 0x08
 34c:	22 30       	cpi	r18, 0x02	; 2
 34e:	31 05       	cpc	r19, r1
 350:	71 f1       	breq	.+92     	; 0x3ae <DIO_setPinValue+0xbc>
 352:	8f 81       	ldd	r24, Y+7	; 0x07
 354:	98 85       	ldd	r25, Y+8	; 0x08
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	91 05       	cpc	r25, r1
 35a:	e9 f1       	breq	.+122    	; 0x3d6 <DIO_setPinValue+0xe4>
 35c:	50 c0       	rjmp	.+160    	; 0x3fe <DIO_setPinValue+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(PORTA,copy_DIO_pin);
 35e:	ab e3       	ldi	r26, 0x3B	; 59
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	eb e3       	ldi	r30, 0x3B	; 59
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_setPinValue+0x8a>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_setPinValue+0x86>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	bb c0       	rjmp	.+374    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(PORTB,copy_DIO_pin);
 386:	a8 e3       	ldi	r26, 0x38	; 56
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e8 e3       	ldi	r30, 0x38	; 56
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_setPinValue+0xb2>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_setPinValue+0xae>
 3a8:	84 2b       	or	r24, r20
 3aa:	8c 93       	st	X, r24
 3ac:	a7 c0       	rjmp	.+334    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(PORTC,copy_DIO_pin);
 3ae:	a5 e3       	ldi	r26, 0x35	; 53
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e5 e3       	ldi	r30, 0x35	; 53
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_setPinValue+0xda>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_setPinValue+0xd6>
 3d0:	84 2b       	or	r24, r20
 3d2:	8c 93       	st	X, r24
 3d4:	93 c0       	rjmp	.+294    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(PORTD,copy_DIO_pin);
 3d6:	a2 e3       	ldi	r26, 0x32	; 50
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e2 e3       	ldi	r30, 0x32	; 50
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	48 2f       	mov	r20, r24
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 2e       	mov	r0, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_setPinValue+0x102>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_setPinValue+0xfe>
 3f8:	84 2b       	or	r24, r20
 3fa:	8c 93       	st	X, r24
 3fc:	7f c0       	rjmp	.+254    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 3fe:	19 82       	std	Y+1, r1	; 0x01
 400:	7d c0       	rjmp	.+250    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
			}
		}
		else if(copy_DIO_value == LOW)
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 23       	and	r24, r24
 406:	09 f0       	breq	.+2      	; 0x40a <DIO_setPinValue+0x118>
 408:	76 c0       	rjmp	.+236    	; 0x4f6 <DIO_setPinValue+0x204>
		{
			switch(copy_DIO_port)
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	3e 83       	std	Y+6, r19	; 0x06
 412:	2d 83       	std	Y+5, r18	; 0x05
 414:	8d 81       	ldd	r24, Y+5	; 0x05
 416:	9e 81       	ldd	r25, Y+6	; 0x06
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	91 05       	cpc	r25, r1
 41c:	59 f1       	breq	.+86     	; 0x474 <DIO_setPinValue+0x182>
 41e:	2d 81       	ldd	r18, Y+5	; 0x05
 420:	3e 81       	ldd	r19, Y+6	; 0x06
 422:	22 30       	cpi	r18, 0x02	; 2
 424:	31 05       	cpc	r19, r1
 426:	2c f4       	brge	.+10     	; 0x432 <DIO_setPinValue+0x140>
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	9e 81       	ldd	r25, Y+6	; 0x06
 42c:	00 97       	sbiw	r24, 0x00	; 0
 42e:	69 f0       	breq	.+26     	; 0x44a <DIO_setPinValue+0x158>
 430:	60 c0       	rjmp	.+192    	; 0x4f2 <DIO_setPinValue+0x200>
 432:	2d 81       	ldd	r18, Y+5	; 0x05
 434:	3e 81       	ldd	r19, Y+6	; 0x06
 436:	22 30       	cpi	r18, 0x02	; 2
 438:	31 05       	cpc	r19, r1
 43a:	89 f1       	breq	.+98     	; 0x49e <DIO_setPinValue+0x1ac>
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	9e 81       	ldd	r25, Y+6	; 0x06
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	91 05       	cpc	r25, r1
 444:	09 f4       	brne	.+2      	; 0x448 <DIO_setPinValue+0x156>
 446:	40 c0       	rjmp	.+128    	; 0x4c8 <DIO_setPinValue+0x1d6>
 448:	54 c0       	rjmp	.+168    	; 0x4f2 <DIO_setPinValue+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(PORTA,copy_DIO_pin);
 44a:	ab e3       	ldi	r26, 0x3B	; 59
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	eb e3       	ldi	r30, 0x3B	; 59
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_setPinValue+0x176>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_setPinValue+0x172>
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	8c 93       	st	X, r24
 472:	44 c0       	rjmp	.+136    	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(PORTB,copy_DIO_pin);
 474:	a8 e3       	ldi	r26, 0x38	; 56
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e8 e3       	ldi	r30, 0x38	; 56
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_setPinValue+0x1a0>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_setPinValue+0x19c>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
 49c:	2f c0       	rjmp	.+94     	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(PORTC,copy_DIO_pin);
 49e:	a5 e3       	ldi	r26, 0x35	; 53
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e3       	ldi	r30, 0x35	; 53
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_setPinValue+0x1ca>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_setPinValue+0x1c6>
 4c0:	80 95       	com	r24
 4c2:	84 23       	and	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	1a c0       	rjmp	.+52     	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(PORTD,copy_DIO_pin);
 4c8:	a2 e3       	ldi	r26, 0x32	; 50
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e2 e3       	ldi	r30, 0x32	; 50
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 2e       	mov	r0, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_setPinValue+0x1f4>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_setPinValue+0x1f0>
 4ea:	80 95       	com	r24
 4ec:	84 23       	and	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 4f2:	19 82       	std	Y+1, r1	; 0x01
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <DIO_setPinValue+0x20a>
					break;
			}
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
 4f6:	19 82       	std	Y+1, r1	; 0x01
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <DIO_setPinValue+0x20a>
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
 4fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fe:	28 96       	adiw	r28, 0x08	; 8
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	cf 91       	pop	r28
 50c:	df 91       	pop	r29
 50e:	08 95       	ret

00000510 <DIO_ReadPinValue>:

uint8 DIO_ReadPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin,  uint8 *copy_DIO_pValue)
{
 510:	df 93       	push	r29
 512:	cf 93       	push	r28
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	27 97       	sbiw	r28, 0x07	; 7
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	8a 83       	std	Y+2, r24	; 0x02
 526:	6b 83       	std	Y+3, r22	; 0x03
 528:	5d 83       	std	Y+5, r21	; 0x05
 52a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_pin <= PIN7) && (copy_DIO_pValue != NULL))
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	88 30       	cpi	r24, 0x08	; 8
 534:	08 f0       	brcs	.+2      	; 0x538 <DIO_ReadPinValue+0x28>
 536:	78 c0       	rjmp	.+240    	; 0x628 <DIO_ReadPinValue+0x118>
 538:	8c 81       	ldd	r24, Y+4	; 0x04
 53a:	9d 81       	ldd	r25, Y+5	; 0x05
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	09 f4       	brne	.+2      	; 0x542 <DIO_ReadPinValue+0x32>
 540:	73 c0       	rjmp	.+230    	; 0x628 <DIO_ReadPinValue+0x118>
	{
		switch (copy_DIO_port)
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	3f 83       	std	Y+7, r19	; 0x07
 54a:	2e 83       	std	Y+6, r18	; 0x06
 54c:	4e 81       	ldd	r20, Y+6	; 0x06
 54e:	5f 81       	ldd	r21, Y+7	; 0x07
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	51 05       	cpc	r21, r1
 554:	59 f1       	breq	.+86     	; 0x5ac <DIO_ReadPinValue+0x9c>
 556:	8e 81       	ldd	r24, Y+6	; 0x06
 558:	9f 81       	ldd	r25, Y+7	; 0x07
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	91 05       	cpc	r25, r1
 55e:	34 f4       	brge	.+12     	; 0x56c <DIO_ReadPinValue+0x5c>
 560:	2e 81       	ldd	r18, Y+6	; 0x06
 562:	3f 81       	ldd	r19, Y+7	; 0x07
 564:	21 15       	cp	r18, r1
 566:	31 05       	cpc	r19, r1
 568:	69 f0       	breq	.+26     	; 0x584 <DIO_ReadPinValue+0x74>
 56a:	5c c0       	rjmp	.+184    	; 0x624 <DIO_ReadPinValue+0x114>
 56c:	4e 81       	ldd	r20, Y+6	; 0x06
 56e:	5f 81       	ldd	r21, Y+7	; 0x07
 570:	42 30       	cpi	r20, 0x02	; 2
 572:	51 05       	cpc	r21, r1
 574:	79 f1       	breq	.+94     	; 0x5d4 <DIO_ReadPinValue+0xc4>
 576:	8e 81       	ldd	r24, Y+6	; 0x06
 578:	9f 81       	ldd	r25, Y+7	; 0x07
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	91 05       	cpc	r25, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_ReadPinValue+0x72>
 580:	3d c0       	rjmp	.+122    	; 0x5fc <DIO_ReadPinValue+0xec>
 582:	50 c0       	rjmp	.+160    	; 0x624 <DIO_ReadPinValue+0x114>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = GET_BIT(PINA,copy_DIO_pin);
 584:	e9 e3       	ldi	r30, 0x39	; 57
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	a9 01       	movw	r20, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_ReadPinValue+0x8c>
 598:	55 95       	asr	r21
 59a:	47 95       	ror	r20
 59c:	8a 95       	dec	r24
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_ReadPinValue+0x88>
 5a0:	ca 01       	movw	r24, r20
 5a2:	81 70       	andi	r24, 0x01	; 1
 5a4:	ec 81       	ldd	r30, Y+4	; 0x04
 5a6:	fd 81       	ldd	r31, Y+5	; 0x05
 5a8:	80 83       	st	Z, r24
 5aa:	3f c0       	rjmp	.+126    	; 0x62a <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = GET_BIT(PINB,copy_DIO_pin);
 5ac:	e6 e3       	ldi	r30, 0x36	; 54
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	a9 01       	movw	r20, r18
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_ReadPinValue+0xb4>
 5c0:	55 95       	asr	r21
 5c2:	47 95       	ror	r20
 5c4:	8a 95       	dec	r24
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_ReadPinValue+0xb0>
 5c8:	ca 01       	movw	r24, r20
 5ca:	81 70       	andi	r24, 0x01	; 1
 5cc:	ec 81       	ldd	r30, Y+4	; 0x04
 5ce:	fd 81       	ldd	r31, Y+5	; 0x05
 5d0:	80 83       	st	Z, r24
 5d2:	2b c0       	rjmp	.+86     	; 0x62a <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = GET_BIT(PINC,copy_DIO_pin);
 5d4:	e3 e3       	ldi	r30, 0x33	; 51
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	a9 01       	movw	r20, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_ReadPinValue+0xdc>
 5e8:	55 95       	asr	r21
 5ea:	47 95       	ror	r20
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_ReadPinValue+0xd8>
 5f0:	ca 01       	movw	r24, r20
 5f2:	81 70       	andi	r24, 0x01	; 1
 5f4:	ec 81       	ldd	r30, Y+4	; 0x04
 5f6:	fd 81       	ldd	r31, Y+5	; 0x05
 5f8:	80 83       	st	Z, r24
 5fa:	17 c0       	rjmp	.+46     	; 0x62a <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = GET_BIT(PIND,copy_DIO_pin);
 5fc:	e0 e3       	ldi	r30, 0x30	; 48
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_ReadPinValue+0x104>
 610:	55 95       	asr	r21
 612:	47 95       	ror	r20
 614:	8a 95       	dec	r24
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_ReadPinValue+0x100>
 618:	ca 01       	movw	r24, r20
 61a:	81 70       	andi	r24, 0x01	; 1
 61c:	ec 81       	ldd	r30, Y+4	; 0x04
 61e:	fd 81       	ldd	r31, Y+5	; 0x05
 620:	80 83       	st	Z, r24
 622:	03 c0       	rjmp	.+6      	; 0x62a <DIO_ReadPinValue+0x11a>
				break;
			default:
				local_errorState = NOT_OK_STAT;
 624:	19 82       	std	Y+1, r1	; 0x01
 626:	01 c0       	rjmp	.+2      	; 0x62a <DIO_ReadPinValue+0x11a>
				break;
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
 628:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorState;
 62a:	89 81       	ldd	r24, Y+1	; 0x01
}
 62c:	27 96       	adiw	r28, 0x07	; 7
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <DIO_setPortDirection>:

uint8 DIO_setPortDirection(uint8 copy_DIO_port,  uint8 copy_DIO_direction)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <DIO_setPortDirection+0x6>
 644:	00 d0       	rcall	.+0      	; 0x646 <DIO_setPortDirection+0x8>
 646:	0f 92       	push	r0
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	8a 83       	std	Y+2, r24	; 0x02
 64e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_direction == PORT_OUTPUT) || (copy_DIO_direction == PORT_INPUT))
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	8f 3f       	cpi	r24, 0xFF	; 255
 658:	19 f0       	breq	.+6      	; 0x660 <DIO_setPortDirection+0x22>
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	88 23       	and	r24, r24
 65e:	a1 f5       	brne	.+104    	; 0x6c8 <DIO_setPortDirection+0x8a>
		{
			switch (copy_DIO_direction)
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	3d 83       	std	Y+5, r19	; 0x05
 668:	2c 83       	std	Y+4, r18	; 0x04
 66a:	8c 81       	ldd	r24, Y+4	; 0x04
 66c:	9d 81       	ldd	r25, Y+5	; 0x05
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	91 05       	cpc	r25, r1
 672:	d1 f0       	breq	.+52     	; 0x6a8 <DIO_setPortDirection+0x6a>
 674:	2c 81       	ldd	r18, Y+4	; 0x04
 676:	3d 81       	ldd	r19, Y+5	; 0x05
 678:	22 30       	cpi	r18, 0x02	; 2
 67a:	31 05       	cpc	r19, r1
 67c:	2c f4       	brge	.+10     	; 0x688 <DIO_setPortDirection+0x4a>
 67e:	8c 81       	ldd	r24, Y+4	; 0x04
 680:	9d 81       	ldd	r25, Y+5	; 0x05
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	61 f0       	breq	.+24     	; 0x69e <DIO_setPortDirection+0x60>
 686:	1f c0       	rjmp	.+62     	; 0x6c6 <DIO_setPortDirection+0x88>
 688:	2c 81       	ldd	r18, Y+4	; 0x04
 68a:	3d 81       	ldd	r19, Y+5	; 0x05
 68c:	22 30       	cpi	r18, 0x02	; 2
 68e:	31 05       	cpc	r19, r1
 690:	81 f0       	breq	.+32     	; 0x6b2 <DIO_setPortDirection+0x74>
 692:	8c 81       	ldd	r24, Y+4	; 0x04
 694:	9d 81       	ldd	r25, Y+5	; 0x05
 696:	83 30       	cpi	r24, 0x03	; 3
 698:	91 05       	cpc	r25, r1
 69a:	81 f0       	breq	.+32     	; 0x6bc <DIO_setPortDirection+0x7e>
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <DIO_setPortDirection+0x88>
			{
				case DIO_PORTA:
					DDRA = copy_DIO_direction;
 69e:	ea e3       	ldi	r30, 0x3A	; 58
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	80 83       	st	Z, r24
 6a6:	10 c0       	rjmp	.+32     	; 0x6c8 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTB:
					DDRB = copy_DIO_direction;
 6a8:	e7 e3       	ldi	r30, 0x37	; 55
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	80 83       	st	Z, r24
 6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTC:
					DDRC = copy_DIO_direction;
 6b2:	e4 e3       	ldi	r30, 0x34	; 52
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	80 83       	st	Z, r24
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTD:
					DDRC = copy_DIO_direction;
 6bc:	e4 e3       	ldi	r30, 0x34	; 52
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	80 83       	st	Z, r24
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <DIO_setPortDirection+0x8a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
 6c6:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
		}
	return local_errorSignal;
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	08 95       	ret

000006da <DIO_setPortValue>:

uint8 DIO_setPortValue(uint8 copy_DIO_port, uint8 copy_DIO_value)
{
 6da:	df 93       	push	r29
 6dc:	cf 93       	push	r28
 6de:	00 d0       	rcall	.+0      	; 0x6e0 <DIO_setPortValue+0x6>
 6e0:	00 d0       	rcall	.+0      	; 0x6e2 <DIO_setPortValue+0x8>
 6e2:	0f 92       	push	r0
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	8a 83       	std	Y+2, r24	; 0x02
 6ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_DIO_port)
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	3d 83       	std	Y+5, r19	; 0x05
 6f8:	2c 83       	std	Y+4, r18	; 0x04
 6fa:	8c 81       	ldd	r24, Y+4	; 0x04
 6fc:	9d 81       	ldd	r25, Y+5	; 0x05
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	91 05       	cpc	r25, r1
 702:	d1 f0       	breq	.+52     	; 0x738 <DIO_setPortValue+0x5e>
 704:	2c 81       	ldd	r18, Y+4	; 0x04
 706:	3d 81       	ldd	r19, Y+5	; 0x05
 708:	22 30       	cpi	r18, 0x02	; 2
 70a:	31 05       	cpc	r19, r1
 70c:	2c f4       	brge	.+10     	; 0x718 <DIO_setPortValue+0x3e>
 70e:	8c 81       	ldd	r24, Y+4	; 0x04
 710:	9d 81       	ldd	r25, Y+5	; 0x05
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	61 f0       	breq	.+24     	; 0x72e <DIO_setPortValue+0x54>
 716:	1f c0       	rjmp	.+62     	; 0x756 <DIO_setPortValue+0x7c>
 718:	2c 81       	ldd	r18, Y+4	; 0x04
 71a:	3d 81       	ldd	r19, Y+5	; 0x05
 71c:	22 30       	cpi	r18, 0x02	; 2
 71e:	31 05       	cpc	r19, r1
 720:	81 f0       	breq	.+32     	; 0x742 <DIO_setPortValue+0x68>
 722:	8c 81       	ldd	r24, Y+4	; 0x04
 724:	9d 81       	ldd	r25, Y+5	; 0x05
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	91 05       	cpc	r25, r1
 72a:	81 f0       	breq	.+32     	; 0x74c <DIO_setPortValue+0x72>
 72c:	14 c0       	rjmp	.+40     	; 0x756 <DIO_setPortValue+0x7c>
	{
		case DIO_PORTA:
			PORTA = copy_DIO_value;
 72e:	eb e3       	ldi	r30, 0x3B	; 59
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	80 83       	st	Z, r24
 736:	10 c0       	rjmp	.+32     	; 0x758 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = copy_DIO_value;
 738:	e8 e3       	ldi	r30, 0x38	; 56
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	80 83       	st	Z, r24
 740:	0b c0       	rjmp	.+22     	; 0x758 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = copy_DIO_value;
 742:	e5 e3       	ldi	r30, 0x35	; 53
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	80 83       	st	Z, r24
 74a:	06 c0       	rjmp	.+12     	; 0x758 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = copy_DIO_value;
 74c:	e2 e3       	ldi	r30, 0x32	; 50
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	80 83       	st	Z, r24
 754:	01 c0       	rjmp	.+2      	; 0x758 <DIO_setPortValue+0x7e>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
 756:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
 758:	89 81       	ldd	r24, Y+1	; 0x01
}
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <DIO_ReadPortValue>:

uint8 DIO_ReadPortValue(uint8 copy_DIO_port,  uint8 *copy_DIO_pValue)
{
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_ReadPortValue+0x6>
 770:	00 d0       	rcall	.+0      	; 0x772 <DIO_ReadPortValue+0x8>
 772:	00 d0       	rcall	.+0      	; 0x774 <DIO_ReadPortValue+0xa>
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	8a 83       	std	Y+2, r24	; 0x02
 77a:	7c 83       	std	Y+4, r23	; 0x04
 77c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_port <= DIO_PORTD) && (copy_DIO_pValue != NULL))
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	84 30       	cpi	r24, 0x04	; 4
 786:	08 f0       	brcs	.+2      	; 0x78a <DIO_ReadPortValue+0x20>
 788:	40 c0       	rjmp	.+128    	; 0x80a <DIO_ReadPortValue+0xa0>
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	9c 81       	ldd	r25, Y+4	; 0x04
 78e:	00 97       	sbiw	r24, 0x00	; 0
 790:	e1 f1       	breq	.+120    	; 0x80a <DIO_ReadPortValue+0xa0>
	{
		switch (copy_DIO_port)
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	28 2f       	mov	r18, r24
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	3e 83       	std	Y+6, r19	; 0x06
 79a:	2d 83       	std	Y+5, r18	; 0x05
 79c:	8d 81       	ldd	r24, Y+5	; 0x05
 79e:	9e 81       	ldd	r25, Y+6	; 0x06
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	91 05       	cpc	r25, r1
 7a4:	e1 f0       	breq	.+56     	; 0x7de <DIO_ReadPortValue+0x74>
 7a6:	2d 81       	ldd	r18, Y+5	; 0x05
 7a8:	3e 81       	ldd	r19, Y+6	; 0x06
 7aa:	22 30       	cpi	r18, 0x02	; 2
 7ac:	31 05       	cpc	r19, r1
 7ae:	2c f4       	brge	.+10     	; 0x7ba <DIO_ReadPortValue+0x50>
 7b0:	8d 81       	ldd	r24, Y+5	; 0x05
 7b2:	9e 81       	ldd	r25, Y+6	; 0x06
 7b4:	00 97       	sbiw	r24, 0x00	; 0
 7b6:	61 f0       	breq	.+24     	; 0x7d0 <DIO_ReadPortValue+0x66>
 7b8:	27 c0       	rjmp	.+78     	; 0x808 <DIO_ReadPortValue+0x9e>
 7ba:	2d 81       	ldd	r18, Y+5	; 0x05
 7bc:	3e 81       	ldd	r19, Y+6	; 0x06
 7be:	22 30       	cpi	r18, 0x02	; 2
 7c0:	31 05       	cpc	r19, r1
 7c2:	a1 f0       	breq	.+40     	; 0x7ec <DIO_ReadPortValue+0x82>
 7c4:	8d 81       	ldd	r24, Y+5	; 0x05
 7c6:	9e 81       	ldd	r25, Y+6	; 0x06
 7c8:	83 30       	cpi	r24, 0x03	; 3
 7ca:	91 05       	cpc	r25, r1
 7cc:	b1 f0       	breq	.+44     	; 0x7fa <DIO_ReadPortValue+0x90>
 7ce:	1c c0       	rjmp	.+56     	; 0x808 <DIO_ReadPortValue+0x9e>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = PINA;
 7d0:	e9 e3       	ldi	r30, 0x39	; 57
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	eb 81       	ldd	r30, Y+3	; 0x03
 7d8:	fc 81       	ldd	r31, Y+4	; 0x04
 7da:	80 83       	st	Z, r24
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = PINB;
 7de:	e6 e3       	ldi	r30, 0x36	; 54
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	eb 81       	ldd	r30, Y+3	; 0x03
 7e6:	fc 81       	ldd	r31, Y+4	; 0x04
 7e8:	80 83       	st	Z, r24
 7ea:	0f c0       	rjmp	.+30     	; 0x80a <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = PINC;
 7ec:	e3 e3       	ldi	r30, 0x33	; 51
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	eb 81       	ldd	r30, Y+3	; 0x03
 7f4:	fc 81       	ldd	r31, Y+4	; 0x04
 7f6:	80 83       	st	Z, r24
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = PIND;
 7fa:	e0 e3       	ldi	r30, 0x30	; 48
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	eb 81       	ldd	r30, Y+3	; 0x03
 802:	fc 81       	ldd	r31, Y+4	; 0x04
 804:	80 83       	st	Z, r24
 806:	01 c0       	rjmp	.+2      	; 0x80a <DIO_ReadPortValue+0xa0>
				break;
			default:
				local_errorSignal = NOT_OK_STAT;
 808:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}

	return local_errorSignal;
 80a:	89 81       	ldd	r24, Y+1	; 0x01
}
 80c:	26 96       	adiw	r28, 0x06	; 6
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	08 95       	ret

0000081e <DIO_setIntPullUpRes>:

uint8 DIO_setIntPullUpRes(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
 81e:	df 93       	push	r29
 820:	cf 93       	push	r28
 822:	00 d0       	rcall	.+0      	; 0x824 <DIO_setIntPullUpRes+0x6>
 824:	0f 92       	push	r0
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	8a 83       	std	Y+2, r24	; 0x02
 82c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinDirection(copy_DIO_port,copy_DIO_pin,INPUT);
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	6b 81       	ldd	r22, Y+3	; 0x03
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	0e 94 6a 00 	call	0xd4	; 0xd4 <DIO_setPinDirection>
 83c:	89 83       	std	Y+1, r24	; 0x01
	if (local_errorSignal == OK_STAT)
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	31 f4       	brne	.+12     	; 0x850 <DIO_setIntPullUpRes+0x32>
	{
		local_errorSignal = DIO_setPinValue(copy_DIO_port,copy_DIO_pin,HIGH);
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	6b 81       	ldd	r22, Y+3	; 0x03
 848:	41 e0       	ldi	r20, 0x01	; 1
 84a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
 84e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
 850:	89 81       	ldd	r24, Y+1	; 0x01
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	cf 91       	pop	r28
 85a:	df 91       	pop	r29
 85c:	08 95       	ret

0000085e <KEYPAD_getValue>:

static uint8 buttonsArray[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_BUTTONS;
static uint8 rowPins[KEYPAD_ROW_NUM] = KEYPAD_ROW_PINS;
static uint8 colPins[KEYPAD_COL_NUM] = KEYPAD_COL_PINS;
uint8 KEYPAD_getValue(void)
{
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
 864:	00 d0       	rcall	.+0      	; 0x866 <__stack+0x7>
 866:	cd b7       	in	r28, 0x3d	; 61
 868:	de b7       	in	r29, 0x3e	; 62
	uint8 local_pressed_button = BUTTON_NOT_PRESSED;
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 local_row_counter = 0;
 86e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_col_counter = 0;
 870:	19 82       	std	Y+1, r1	; 0x01

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
 872:	19 82       	std	Y+1, r1	; 0x01
 874:	5e c0       	rjmp	.+188    	; 0x932 <__stack+0xd3>
	{
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],LOW);
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	fc 01       	movw	r30, r24
 87e:	ec 58       	subi	r30, 0x8C	; 140
 880:	ff 4f       	sbci	r31, 0xFF	; 255
 882:	90 81       	ld	r25, Z
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	69 2f       	mov	r22, r25
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
 88e:	1a 82       	std	Y+2, r1	; 0x02
 890:	3d c0       	rjmp	.+122    	; 0x90c <__stack+0xad>
		{
			DIO_ReadPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
 892:	8a 81       	ldd	r24, Y+2	; 0x02
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	fc 01       	movw	r30, r24
 89a:	e0 59       	subi	r30, 0x90	; 144
 89c:	ff 4f       	sbci	r31, 0xFF	; 255
 89e:	90 81       	ld	r25, Z
 8a0:	9e 01       	movw	r18, r28
 8a2:	2d 5f       	subi	r18, 0xFD	; 253
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	82 e0       	ldi	r24, 0x02	; 2
 8a8:	69 2f       	mov	r22, r25
 8aa:	a9 01       	movw	r20, r18
 8ac:	0e 94 88 02 	call	0x510	; 0x510 <DIO_ReadPinValue>
			if (local_pressed_button == LOW)
 8b0:	8b 81       	ldd	r24, Y+3	; 0x03
 8b2:	88 23       	and	r24, r24
 8b4:	41 f5       	brne	.+80     	; 0x906 <__stack+0xa7>
 8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <__stack+0x77>
			{
				while (local_pressed_button == LOW)
				{
					DIO_ReadPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	fc 01       	movw	r30, r24
 8c0:	e0 59       	subi	r30, 0x90	; 144
 8c2:	ff 4f       	sbci	r31, 0xFF	; 255
 8c4:	90 81       	ld	r25, Z
 8c6:	9e 01       	movw	r18, r28
 8c8:	2d 5f       	subi	r18, 0xFD	; 253
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	69 2f       	mov	r22, r25
 8d0:	a9 01       	movw	r20, r18
 8d2:	0e 94 88 02 	call	0x510	; 0x510 <DIO_ReadPinValue>
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
		{
			DIO_ReadPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
			if (local_pressed_button == LOW)
			{
				while (local_pressed_button == LOW)
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	88 23       	and	r24, r24
 8da:	71 f3       	breq	.-36     	; 0x8b8 <__stack+0x59>
				{
					DIO_ReadPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
				}
				local_pressed_button = buttonsArray[local_row_counter][local_col_counter];
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	48 2f       	mov	r20, r24
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	28 2f       	mov	r18, r24
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	ca 01       	movw	r24, r20
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	82 0f       	add	r24, r18
 8f4:	93 1f       	adc	r25, r19
 8f6:	fc 01       	movw	r30, r24
 8f8:	e0 5a       	subi	r30, 0xA0	; 160
 8fa:	ff 4f       	sbci	r31, 0xFF	; 255
 8fc:	80 81       	ld	r24, Z
 8fe:	8b 83       	std	Y+3, r24	; 0x03
				return local_pressed_button;
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	8c 83       	std	Y+4, r24	; 0x04
 904:	1c c0       	rjmp	.+56     	; 0x93e <__stack+0xdf>
	uint8 local_col_counter = 0;

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
	{
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],LOW);
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
 906:	8a 81       	ldd	r24, Y+2	; 0x02
 908:	8f 5f       	subi	r24, 0xFF	; 255
 90a:	8a 83       	std	Y+2, r24	; 0x02
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	08 f4       	brcc	.+2      	; 0x914 <__stack+0xb5>
 912:	bf cf       	rjmp	.-130    	; 0x892 <__stack+0x33>
				}
				local_pressed_button = buttonsArray[local_row_counter][local_col_counter];
				return local_pressed_button;
			}
		}
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],HIGH);
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	88 2f       	mov	r24, r24
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	fc 01       	movw	r30, r24
 91c:	ec 58       	subi	r30, 0x8C	; 140
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	90 81       	ld	r25, Z
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	69 2f       	mov	r22, r25
 926:	41 e0       	ldi	r20, 0x01	; 1
 928:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_setPinValue>
{
	uint8 local_pressed_button = BUTTON_NOT_PRESSED;
	uint8 local_row_counter = 0;
	uint8 local_col_counter = 0;

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
 92c:	89 81       	ldd	r24, Y+1	; 0x01
 92e:	8f 5f       	subi	r24, 0xFF	; 255
 930:	89 83       	std	Y+1, r24	; 0x01
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	84 30       	cpi	r24, 0x04	; 4
 936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0xdb>
 938:	9e cf       	rjmp	.-196    	; 0x876 <__stack+0x17>
				return local_pressed_button;
			}
		}
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],HIGH);
	}
	return local_pressed_button;
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	8c 83       	std	Y+4, r24	; 0x04
 93e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	cf 91       	pop	r28
 94a:	df 91       	pop	r29
 94c:	08 95       	ret

0000094e <main>:
#include "KEYPAD_Interfacing.h"

uint8 tempData = 0;
uint8 data = 0;
int main(void)
{
 94e:	df 93       	push	r29
 950:	cf 93       	push	r28
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
	DIO_initalizePorts();
 956:	0e 94 49 00 	call	0x92	; 0x92 <DIO_initalizePorts>
	while (1)
	{
		tempData = KEYPAD_getValue();
 95a:	0e 94 2f 04 	call	0x85e	; 0x85e <KEYPAD_getValue>
 95e:	80 93 78 00 	sts	0x0078, r24
		if (tempData != 0x01)
 962:	80 91 78 00 	lds	r24, 0x0078
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	c1 f3       	breq	.-16     	; 0x95a <main+0xc>
		{
			data = tempData;
 96a:	80 91 78 00 	lds	r24, 0x0078
 96e:	80 93 79 00 	sts	0x0079, r24
 972:	f3 cf       	rjmp	.-26     	; 0x95a <main+0xc>

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
