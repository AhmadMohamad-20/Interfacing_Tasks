
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000120c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00001280  2**0
                  ALLOC
  2 .debug_aranges 000001a0  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000351  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008f6  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000334  00000000  00000000  00002067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011f9  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000280  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000493  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00009032  00000000  00000000  00003ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000170  00000000  00000000  0000ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_1>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_2>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 36       	cpi	r26, 0x68	; 104
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <main>
      74:	0c 94 04 09 	jmp	0x1208	; 0x1208 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_turnOn>:
#include "LED_Private.h"
#include "LED_Reg.h"
#include "LED_Interface.h"

uint8 LED_turnOn(uint8 copy_LED_port,uint8 copy_LED_pin)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <LED_turnOn+0x6>
      82:	0f 92       	push	r0
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	8a 83       	std	Y+2, r24	; 0x02
      8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
      8c:	81 e0       	ldi	r24, 0x01	; 1
      8e:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(copy_LED_port,copy_LED_pin,HIGH);
      90:	8a 81       	ldd	r24, Y+2	; 0x02
      92:	6b 81       	ldd	r22, Y+3	; 0x03
      94:	41 e0       	ldi	r20, 0x01	; 1
      96:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_setPinValue>
      9a:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
      9c:	89 81       	ldd	r24, Y+1	; 0x01
}
      9e:	0f 90       	pop	r0
      a0:	0f 90       	pop	r0
      a2:	0f 90       	pop	r0
      a4:	cf 91       	pop	r28
      a6:	df 91       	pop	r29
      a8:	08 95       	ret

000000aa <LED_turnOff>:

uint8 LED_turnOff(uint8 copy_LED_port,uint8 copy_LED_pin)
{
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	00 d0       	rcall	.+0      	; 0xb0 <LED_turnOff+0x6>
      b0:	0f 92       	push	r0
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	8a 83       	std	Y+2, r24	; 0x02
      b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(copy_LED_port,copy_LED_pin,LOW);
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	6b 81       	ldd	r22, Y+3	; 0x03
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_setPinValue>
      c8:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
      ca:	89 81       	ldd	r24, Y+1	; 0x01
}
      cc:	0f 90       	pop	r0
      ce:	0f 90       	pop	r0
      d0:	0f 90       	pop	r0
      d2:	cf 91       	pop	r28
      d4:	df 91       	pop	r29
      d6:	08 95       	ret

000000d8 <LED_toggle>:

uint8 LED_toggle(uint8 copy_LED_port,uint8 copy_LED_pin)
{
      d8:	df 93       	push	r29
      da:	cf 93       	push	r28
      dc:	00 d0       	rcall	.+0      	; 0xde <LED_toggle+0x6>
      de:	0f 92       	push	r0
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	8a 83       	std	Y+2, r24	; 0x02
      e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_togglePinValue(copy_LED_port,copy_LED_pin);
      ec:	8a 81       	ldd	r24, Y+2	; 0x02
      ee:	6b 81       	ldd	r22, Y+3	; 0x03
      f0:	0e 94 08 04 	call	0x810	; 0x810 <DIO_togglePinValue>
      f4:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
      f6:	89 81       	ldd	r24, Y+1	; 0x01
}
      f8:	0f 90       	pop	r0
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	08 95       	ret

00000104 <GENERAL_INTERRUPT_enableInterrupt>:
#include "GEN_INTERRUPT__Reg.h"
#include "GEN_INTERRUPT__Private.h"
#include "GEN_INTERRUPT__Interacing.h"

void GENERAL_INTERRUPT_enableInterrupt()
{
     104:	df 93       	push	r29
     106:	cf 93       	push	r28
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GENERAL_INTERRUPT_PIN);
     10c:	af e5       	ldi	r26, 0x5F	; 95
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	ef e5       	ldi	r30, 0x5F	; 95
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 68       	ori	r24, 0x80	; 128
     118:	8c 93       	st	X, r24
}
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <GENERAL_INTERRUPT_disableInterrupt>:
void GENERAL_INTERRUPT_disableInterrupt()
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,GENERAL_INTERRUPT_PIN);
     128:	af e5       	ldi	r26, 0x5F	; 95
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	ef e5       	ldi	r30, 0x5F	; 95
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	8f 77       	andi	r24, 0x7F	; 127
     134:	8c 93       	st	X, r24
}
     136:	cf 91       	pop	r28
     138:	df 91       	pop	r29
     13a:	08 95       	ret

0000013c <DIO_INTERRUPT_callBack>:
#include "DIO_INTERRUPT__Interacing.h"

void (*EXTINT0)(void) = NULL;

void DIO_INTERRUPT_callBack(void (*funcPtr)(void))
{
     13c:	df 93       	push	r29
     13e:	cf 93       	push	r28
     140:	00 d0       	rcall	.+0      	; 0x142 <DIO_INTERRUPT_callBack+0x6>
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	9a 83       	std	Y+2, r25	; 0x02
     148:	89 83       	std	Y+1, r24	; 0x01
	EXTINT0 = funcPtr;
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	90 93 61 00 	sts	0x0061, r25
     152:	80 93 60 00 	sts	0x0060, r24
}
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <DIO_INTERRUPT_enableINT0>:

void DIO_INTERRUPT_enableINT0(uint8 copy_triggering_method)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	0f 92       	push	r0
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
	GENERAL_INTERRUPT_enableInterrupt();
     16c:	0e 94 82 00 	call	0x104	; 0x104 <GENERAL_INTERRUPT_enableInterrupt>
	SET_BIT(GICR,INT0_PIN);
     170:	ab e5       	ldi	r26, 0x5B	; 91
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	eb e5       	ldi	r30, 0x5B	; 91
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	80 64       	ori	r24, 0x40	; 64
     17c:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN0);
#elif (copy_triggering_method == RISING_EDGE_TRIGGERING)
	SET_BIT(MCUCR,PIN1);
	SET_BIT(MCUCR,PIN0);
#elif (copy_triggering_method == LOW_LEVEL_TRIGGERING)
	CLEAR_BIT(MCUCR,PIN1);
     17e:	a5 e5       	ldi	r26, 0x55	; 85
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e5 e5       	ldi	r30, 0x55	; 85
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN0);
     18c:	a5 e5       	ldi	r26, 0x55	; 85
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e5 e5       	ldi	r30, 0x55	; 85
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	8e 7f       	andi	r24, 0xFE	; 254
     198:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN1);
	SET_BIT(MCUCR,PIN0);
#else
#error ("the triggering method isn't valid or INT0")
#endif
}
     19a:	0f 90       	pop	r0
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <DIO_INTERRUPT_enableINT1>:

void DIO_INTERRUPT_enableINT1()
{
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	GENERAL_INTERRUPT_enableInterrupt();
     1aa:	0e 94 82 00 	call	0x104	; 0x104 <GENERAL_INTERRUPT_enableInterrupt>
	SET_BIT(GICR,INT1_PIN);
     1ae:	ab e5       	ldi	r26, 0x5B	; 91
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	eb e5       	ldi	r30, 0x5B	; 91
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	8c 93       	st	X, r24

#if (INT1_TRIGGRING_METHOD == FALLING_EDGE_TRIGGERING)
	SET_BIT(MCUCR,PIN3);
     1bc:	a5 e5       	ldi	r26, 0x55	; 85
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	e5 e5       	ldi	r30, 0x55	; 85
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 60       	ori	r24, 0x08	; 8
     1c8:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN2);
     1ca:	a5 e5       	ldi	r26, 0x55	; 85
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e5 e5       	ldi	r30, 0x55	; 85
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	8b 7f       	andi	r24, 0xFB	; 251
     1d6:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN3);
	SET_BIT(MCUCR,PIN2);
#else
#error ("the triggering method isn't valid or INT1")
#endif
}
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <DIO_INTERRUPT_enableINT2>:

void DIO_INTERRUPT_enableINT2()
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
	GENERAL_INTERRUPT_enableInterrupt();
     1e6:	0e 94 82 00 	call	0x104	; 0x104 <GENERAL_INTERRUPT_enableInterrupt>
	SET_BIT(GICR,INT1_PIN);
     1ea:	ab e5       	ldi	r26, 0x5B	; 91
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	eb e5       	ldi	r30, 0x5B	; 91
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	80 68       	ori	r24, 0x80	; 128
     1f6:	8c 93       	st	X, r24

#if (INT1_TRIGGRING_METHOD == FALLING_EDGE_TRIGGERING)
	CLEAR_BIT(MCUCSR,PIN6);
     1f8:	a4 e5       	ldi	r26, 0x54	; 84
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e4 e5       	ldi	r30, 0x54	; 84
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8f 7b       	andi	r24, 0xBF	; 191
     204:	8c 93       	st	X, r24
#elif (INT1_TRIGGRING_METHOD == RISING_EDGE_TRIGGERING)
	SET_BIT(MCUCR,PIN6);
#else
#error ("the triggering method isn't valid or INT2")
#endif
}
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	2f 93       	push	r18
     218:	3f 93       	push	r19
     21a:	4f 93       	push	r20
     21c:	5f 93       	push	r21
     21e:	6f 93       	push	r22
     220:	7f 93       	push	r23
     222:	8f 93       	push	r24
     224:	9f 93       	push	r25
     226:	af 93       	push	r26
     228:	bf 93       	push	r27
     22a:	ef 93       	push	r30
     22c:	ff 93       	push	r31
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	EXTINT0();
     236:	e0 91 60 00 	lds	r30, 0x0060
     23a:	f0 91 61 00 	lds	r31, 0x0061
     23e:	09 95       	icall
}
     240:	cf 91       	pop	r28
     242:	df 91       	pop	r29
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62

}
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62

}
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <DIO_setPinDirection>:
#include "DIO_Private.h"
#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_setPinDirection(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_direction)
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	28 97       	sbiw	r28, 0x08	; 8
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	6b 83       	std	Y+3, r22	; 0x03
     2be:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <DIO_setPinDirection+0x26>
     2ca:	f1 c0       	rjmp	.+482    	; 0x4ae <DIO_setPinDirection+0x208>
	{
		if (copy_DIO_direction == OUTPUT)
     2cc:	8c 81       	ldd	r24, Y+4	; 0x04
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <DIO_setPinDirection+0x2e>
     2d2:	71 c0       	rjmp	.+226    	; 0x3b6 <DIO_setPinDirection+0x110>
		{
			switch (copy_DIO_port)
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	28 2f       	mov	r18, r24
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	38 87       	std	Y+8, r19	; 0x08
     2dc:	2f 83       	std	Y+7, r18	; 0x07
     2de:	8f 81       	ldd	r24, Y+7	; 0x07
     2e0:	98 85       	ldd	r25, Y+8	; 0x08
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	91 05       	cpc	r25, r1
     2e6:	49 f1       	breq	.+82     	; 0x33a <DIO_setPinDirection+0x94>
     2e8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ea:	38 85       	ldd	r19, Y+8	; 0x08
     2ec:	22 30       	cpi	r18, 0x02	; 2
     2ee:	31 05       	cpc	r19, r1
     2f0:	2c f4       	brge	.+10     	; 0x2fc <DIO_setPinDirection+0x56>
     2f2:	8f 81       	ldd	r24, Y+7	; 0x07
     2f4:	98 85       	ldd	r25, Y+8	; 0x08
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	61 f0       	breq	.+24     	; 0x312 <DIO_setPinDirection+0x6c>
     2fa:	5b c0       	rjmp	.+182    	; 0x3b2 <DIO_setPinDirection+0x10c>
     2fc:	2f 81       	ldd	r18, Y+7	; 0x07
     2fe:	38 85       	ldd	r19, Y+8	; 0x08
     300:	22 30       	cpi	r18, 0x02	; 2
     302:	31 05       	cpc	r19, r1
     304:	71 f1       	breq	.+92     	; 0x362 <DIO_setPinDirection+0xbc>
     306:	8f 81       	ldd	r24, Y+7	; 0x07
     308:	98 85       	ldd	r25, Y+8	; 0x08
     30a:	83 30       	cpi	r24, 0x03	; 3
     30c:	91 05       	cpc	r25, r1
     30e:	e9 f1       	breq	.+122    	; 0x38a <DIO_setPinDirection+0xe4>
     310:	50 c0       	rjmp	.+160    	; 0x3b2 <DIO_setPinDirection+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(DDRA,copy_DIO_pin);
     312:	aa e3       	ldi	r26, 0x3A	; 58
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ea e3       	ldi	r30, 0x3A	; 58
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	48 2f       	mov	r20, r24
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 2e       	mov	r0, r18
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_setPinDirection+0x8a>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_setPinDirection+0x86>
     334:	84 2b       	or	r24, r20
     336:	8c 93       	st	X, r24
     338:	bb c0       	rjmp	.+374    	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(DDRB,copy_DIO_pin);
     33a:	a7 e3       	ldi	r26, 0x37	; 55
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e7 e3       	ldi	r30, 0x37	; 55
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	48 2f       	mov	r20, r24
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	28 2f       	mov	r18, r24
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 2e       	mov	r0, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_setPinDirection+0xb2>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_setPinDirection+0xae>
     35c:	84 2b       	or	r24, r20
     35e:	8c 93       	st	X, r24
     360:	a7 c0       	rjmp	.+334    	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(DDRC,copy_DIO_pin);
     362:	a4 e3       	ldi	r26, 0x34	; 52
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e4 e3       	ldi	r30, 0x34	; 52
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	48 2f       	mov	r20, r24
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	28 2f       	mov	r18, r24
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 2e       	mov	r0, r18
     37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_setPinDirection+0xda>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_setPinDirection+0xd6>
     384:	84 2b       	or	r24, r20
     386:	8c 93       	st	X, r24
     388:	93 c0       	rjmp	.+294    	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(DDRD,copy_DIO_pin);
     38a:	a1 e3       	ldi	r26, 0x31	; 49
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	e1 e3       	ldi	r30, 0x31	; 49
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	48 2f       	mov	r20, r24
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	02 2e       	mov	r0, r18
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_setPinDirection+0x102>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	0a 94       	dec	r0
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_setPinDirection+0xfe>
     3ac:	84 2b       	or	r24, r20
     3ae:	8c 93       	st	X, r24
     3b0:	7f c0       	rjmp	.+254    	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
     3b2:	19 82       	std	Y+1, r1	; 0x01
     3b4:	7d c0       	rjmp	.+250    	; 0x4b0 <DIO_setPinDirection+0x20a>
			}
		}
		else if (copy_DIO_direction == INPUT)
     3b6:	8c 81       	ldd	r24, Y+4	; 0x04
     3b8:	88 23       	and	r24, r24
     3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_setPinDirection+0x118>
     3bc:	76 c0       	rjmp	.+236    	; 0x4aa <DIO_setPinDirection+0x204>
		{
			switch (copy_DIO_port)
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	28 2f       	mov	r18, r24
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	3e 83       	std	Y+6, r19	; 0x06
     3c6:	2d 83       	std	Y+5, r18	; 0x05
     3c8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ca:	9e 81       	ldd	r25, Y+6	; 0x06
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	59 f1       	breq	.+86     	; 0x428 <DIO_setPinDirection+0x182>
     3d2:	2d 81       	ldd	r18, Y+5	; 0x05
     3d4:	3e 81       	ldd	r19, Y+6	; 0x06
     3d6:	22 30       	cpi	r18, 0x02	; 2
     3d8:	31 05       	cpc	r19, r1
     3da:	2c f4       	brge	.+10     	; 0x3e6 <DIO_setPinDirection+0x140>
     3dc:	8d 81       	ldd	r24, Y+5	; 0x05
     3de:	9e 81       	ldd	r25, Y+6	; 0x06
     3e0:	00 97       	sbiw	r24, 0x00	; 0
     3e2:	69 f0       	breq	.+26     	; 0x3fe <DIO_setPinDirection+0x158>
     3e4:	60 c0       	rjmp	.+192    	; 0x4a6 <DIO_setPinDirection+0x200>
     3e6:	2d 81       	ldd	r18, Y+5	; 0x05
     3e8:	3e 81       	ldd	r19, Y+6	; 0x06
     3ea:	22 30       	cpi	r18, 0x02	; 2
     3ec:	31 05       	cpc	r19, r1
     3ee:	89 f1       	breq	.+98     	; 0x452 <DIO_setPinDirection+0x1ac>
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	9e 81       	ldd	r25, Y+6	; 0x06
     3f4:	83 30       	cpi	r24, 0x03	; 3
     3f6:	91 05       	cpc	r25, r1
     3f8:	09 f4       	brne	.+2      	; 0x3fc <DIO_setPinDirection+0x156>
     3fa:	40 c0       	rjmp	.+128    	; 0x47c <DIO_setPinDirection+0x1d6>
     3fc:	54 c0       	rjmp	.+168    	; 0x4a6 <DIO_setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA,copy_DIO_pin);
     3fe:	aa e3       	ldi	r26, 0x3A	; 58
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	ea e3       	ldi	r30, 0x3A	; 58
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	48 2f       	mov	r20, r24
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 2e       	mov	r0, r18
     416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_setPinDirection+0x176>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_setPinDirection+0x172>
     420:	80 95       	com	r24
     422:	84 23       	and	r24, r20
     424:	8c 93       	st	X, r24
     426:	44 c0       	rjmp	.+136    	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(DDRB,copy_DIO_pin);
     428:	a7 e3       	ldi	r26, 0x37	; 55
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e7 e3       	ldi	r30, 0x37	; 55
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	48 2f       	mov	r20, r24
     434:	8b 81       	ldd	r24, Y+3	; 0x03
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 2e       	mov	r0, r18
     440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_setPinDirection+0x1a0>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	0a 94       	dec	r0
     448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_setPinDirection+0x19c>
     44a:	80 95       	com	r24
     44c:	84 23       	and	r24, r20
     44e:	8c 93       	st	X, r24
     450:	2f c0       	rjmp	.+94     	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(DDRC,copy_DIO_pin);
     452:	a4 e3       	ldi	r26, 0x34	; 52
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e4 e3       	ldi	r30, 0x34	; 52
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	48 2f       	mov	r20, r24
     45e:	8b 81       	ldd	r24, Y+3	; 0x03
     460:	28 2f       	mov	r18, r24
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 2e       	mov	r0, r18
     46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_setPinDirection+0x1ca>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_setPinDirection+0x1c6>
     474:	80 95       	com	r24
     476:	84 23       	and	r24, r20
     478:	8c 93       	st	X, r24
     47a:	1a c0       	rjmp	.+52     	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(DDRD,copy_DIO_pin);
     47c:	a1 e3       	ldi	r26, 0x31	; 49
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e1 e3       	ldi	r30, 0x31	; 49
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	48 2f       	mov	r20, r24
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	28 2f       	mov	r18, r24
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	02 2e       	mov	r0, r18
     494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_setPinDirection+0x1f4>
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	0a 94       	dec	r0
     49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_setPinDirection+0x1f0>
     49e:	80 95       	com	r24
     4a0:	84 23       	and	r24, r20
     4a2:	8c 93       	st	X, r24
     4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
     4a6:	19 82       	std	Y+1, r1	; 0x01
     4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <DIO_setPinDirection+0x20a>
			}
		}
		else
		{
			local_errorState = NOT_OK_STAT;
     4aa:	19 82       	std	Y+1, r1	; 0x01
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <DIO_setPinDirection+0x20a>
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
     4ae:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorState;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b2:	28 96       	adiw	r28, 0x08	; 8
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <DIO_setPinValue>:

uint8 DIO_setPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_value)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	28 97       	sbiw	r28, 0x08	; 8
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	8a 83       	std	Y+2, r24	; 0x02
     4da:	6b 83       	std	Y+3, r22	; 0x03
     4dc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
     4e2:	8b 81       	ldd	r24, Y+3	; 0x03
     4e4:	88 30       	cpi	r24, 0x08	; 8
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <DIO_setPinValue+0x26>
     4e8:	f1 c0       	rjmp	.+482    	; 0x6cc <DIO_setPinValue+0x208>
	{
		if (copy_DIO_value == HIGH)
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <DIO_setPinValue+0x2e>
     4f0:	71 c0       	rjmp	.+226    	; 0x5d4 <DIO_setPinValue+0x110>
		{
			switch(copy_DIO_port)
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	28 2f       	mov	r18, r24
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	38 87       	std	Y+8, r19	; 0x08
     4fa:	2f 83       	std	Y+7, r18	; 0x07
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	98 85       	ldd	r25, Y+8	; 0x08
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	91 05       	cpc	r25, r1
     504:	49 f1       	breq	.+82     	; 0x558 <DIO_setPinValue+0x94>
     506:	2f 81       	ldd	r18, Y+7	; 0x07
     508:	38 85       	ldd	r19, Y+8	; 0x08
     50a:	22 30       	cpi	r18, 0x02	; 2
     50c:	31 05       	cpc	r19, r1
     50e:	2c f4       	brge	.+10     	; 0x51a <DIO_setPinValue+0x56>
     510:	8f 81       	ldd	r24, Y+7	; 0x07
     512:	98 85       	ldd	r25, Y+8	; 0x08
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	61 f0       	breq	.+24     	; 0x530 <DIO_setPinValue+0x6c>
     518:	5b c0       	rjmp	.+182    	; 0x5d0 <DIO_setPinValue+0x10c>
     51a:	2f 81       	ldd	r18, Y+7	; 0x07
     51c:	38 85       	ldd	r19, Y+8	; 0x08
     51e:	22 30       	cpi	r18, 0x02	; 2
     520:	31 05       	cpc	r19, r1
     522:	71 f1       	breq	.+92     	; 0x580 <DIO_setPinValue+0xbc>
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	98 85       	ldd	r25, Y+8	; 0x08
     528:	83 30       	cpi	r24, 0x03	; 3
     52a:	91 05       	cpc	r25, r1
     52c:	e9 f1       	breq	.+122    	; 0x5a8 <DIO_setPinValue+0xe4>
     52e:	50 c0       	rjmp	.+160    	; 0x5d0 <DIO_setPinValue+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(PORTA,copy_DIO_pin);
     530:	ab e3       	ldi	r26, 0x3B	; 59
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	eb e3       	ldi	r30, 0x3B	; 59
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	48 2f       	mov	r20, r24
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	28 2f       	mov	r18, r24
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	02 2e       	mov	r0, r18
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_setPinValue+0x8a>
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	0a 94       	dec	r0
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_setPinValue+0x86>
     552:	84 2b       	or	r24, r20
     554:	8c 93       	st	X, r24
     556:	bb c0       	rjmp	.+374    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(PORTB,copy_DIO_pin);
     558:	a8 e3       	ldi	r26, 0x38	; 56
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	e8 e3       	ldi	r30, 0x38	; 56
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	48 2f       	mov	r20, r24
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	02 2e       	mov	r0, r18
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_setPinValue+0xb2>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_setPinValue+0xae>
     57a:	84 2b       	or	r24, r20
     57c:	8c 93       	st	X, r24
     57e:	a7 c0       	rjmp	.+334    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(PORTC,copy_DIO_pin);
     580:	a5 e3       	ldi	r26, 0x35	; 53
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e5 e3       	ldi	r30, 0x35	; 53
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	48 2f       	mov	r20, r24
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 2e       	mov	r0, r18
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_setPinValue+0xda>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	0a 94       	dec	r0
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_setPinValue+0xd6>
     5a2:	84 2b       	or	r24, r20
     5a4:	8c 93       	st	X, r24
     5a6:	93 c0       	rjmp	.+294    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(PORTD,copy_DIO_pin);
     5a8:	a2 e3       	ldi	r26, 0x32	; 50
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	e2 e3       	ldi	r30, 0x32	; 50
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	48 2f       	mov	r20, r24
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	02 2e       	mov	r0, r18
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_setPinValue+0x102>
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	0a 94       	dec	r0
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_setPinValue+0xfe>
     5ca:	84 2b       	or	r24, r20
     5cc:	8c 93       	st	X, r24
     5ce:	7f c0       	rjmp	.+254    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
     5d0:	19 82       	std	Y+1, r1	; 0x01
     5d2:	7d c0       	rjmp	.+250    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
			}
		}
		else if(copy_DIO_value == LOW)
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	88 23       	and	r24, r24
     5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_setPinValue+0x118>
     5da:	76 c0       	rjmp	.+236    	; 0x6c8 <DIO_setPinValue+0x204>
		{
			switch(copy_DIO_port)
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	3e 83       	std	Y+6, r19	; 0x06
     5e4:	2d 83       	std	Y+5, r18	; 0x05
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	59 f1       	breq	.+86     	; 0x646 <DIO_setPinValue+0x182>
     5f0:	2d 81       	ldd	r18, Y+5	; 0x05
     5f2:	3e 81       	ldd	r19, Y+6	; 0x06
     5f4:	22 30       	cpi	r18, 0x02	; 2
     5f6:	31 05       	cpc	r19, r1
     5f8:	2c f4       	brge	.+10     	; 0x604 <DIO_setPinValue+0x140>
     5fa:	8d 81       	ldd	r24, Y+5	; 0x05
     5fc:	9e 81       	ldd	r25, Y+6	; 0x06
     5fe:	00 97       	sbiw	r24, 0x00	; 0
     600:	69 f0       	breq	.+26     	; 0x61c <DIO_setPinValue+0x158>
     602:	60 c0       	rjmp	.+192    	; 0x6c4 <DIO_setPinValue+0x200>
     604:	2d 81       	ldd	r18, Y+5	; 0x05
     606:	3e 81       	ldd	r19, Y+6	; 0x06
     608:	22 30       	cpi	r18, 0x02	; 2
     60a:	31 05       	cpc	r19, r1
     60c:	89 f1       	breq	.+98     	; 0x670 <DIO_setPinValue+0x1ac>
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	9e 81       	ldd	r25, Y+6	; 0x06
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	91 05       	cpc	r25, r1
     616:	09 f4       	brne	.+2      	; 0x61a <DIO_setPinValue+0x156>
     618:	40 c0       	rjmp	.+128    	; 0x69a <DIO_setPinValue+0x1d6>
     61a:	54 c0       	rjmp	.+168    	; 0x6c4 <DIO_setPinValue+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(PORTA,copy_DIO_pin);
     61c:	ab e3       	ldi	r26, 0x3B	; 59
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	eb e3       	ldi	r30, 0x3B	; 59
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	48 2f       	mov	r20, r24
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	02 2e       	mov	r0, r18
     634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_setPinValue+0x176>
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	0a 94       	dec	r0
     63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_setPinValue+0x172>
     63e:	80 95       	com	r24
     640:	84 23       	and	r24, r20
     642:	8c 93       	st	X, r24
     644:	44 c0       	rjmp	.+136    	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(PORTB,copy_DIO_pin);
     646:	a8 e3       	ldi	r26, 0x38	; 56
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e3       	ldi	r30, 0x38	; 56
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 2e       	mov	r0, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_setPinValue+0x1a0>
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_setPinValue+0x19c>
     668:	80 95       	com	r24
     66a:	84 23       	and	r24, r20
     66c:	8c 93       	st	X, r24
     66e:	2f c0       	rjmp	.+94     	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(PORTC,copy_DIO_pin);
     670:	a5 e3       	ldi	r26, 0x35	; 53
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e5 e3       	ldi	r30, 0x35	; 53
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	48 2f       	mov	r20, r24
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	28 2f       	mov	r18, r24
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	02 2e       	mov	r0, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_setPinValue+0x1ca>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_setPinValue+0x1c6>
     692:	80 95       	com	r24
     694:	84 23       	and	r24, r20
     696:	8c 93       	st	X, r24
     698:	1a c0       	rjmp	.+52     	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(PORTD,copy_DIO_pin);
     69a:	a2 e3       	ldi	r26, 0x32	; 50
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e2 e3       	ldi	r30, 0x32	; 50
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	48 2f       	mov	r20, r24
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	28 2f       	mov	r18, r24
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_setPinValue+0x1f4>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_setPinValue+0x1f0>
     6bc:	80 95       	com	r24
     6be:	84 23       	and	r24, r20
     6c0:	8c 93       	st	X, r24
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
     6c4:	19 82       	std	Y+1, r1	; 0x01
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <DIO_setPinValue+0x20a>
					break;
			}
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
     6c8:	19 82       	std	Y+1, r1	; 0x01
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <DIO_setPinValue+0x20a>
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
     6cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     6d0:	28 96       	adiw	r28, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <DIO_ReadPinValue>:

uint8 DIO_ReadPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin,  uint8 *copy_DIO_pValue)
{
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	27 97       	sbiw	r28, 0x07	; 7
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	8a 83       	std	Y+2, r24	; 0x02
     6f8:	6b 83       	std	Y+3, r22	; 0x03
     6fa:	5d 83       	std	Y+5, r21	; 0x05
     6fc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorState = OK_STAT;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_pin <= PIN7) && (copy_DIO_pValue != NULL))
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	08 f0       	brcs	.+2      	; 0x70a <DIO_ReadPinValue+0x28>
     708:	78 c0       	rjmp	.+240    	; 0x7fa <DIO_ReadPinValue+0x118>
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	9d 81       	ldd	r25, Y+5	; 0x05
     70e:	00 97       	sbiw	r24, 0x00	; 0
     710:	09 f4       	brne	.+2      	; 0x714 <DIO_ReadPinValue+0x32>
     712:	73 c0       	rjmp	.+230    	; 0x7fa <DIO_ReadPinValue+0x118>
	{
		switch (copy_DIO_port)
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	28 2f       	mov	r18, r24
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	3f 83       	std	Y+7, r19	; 0x07
     71c:	2e 83       	std	Y+6, r18	; 0x06
     71e:	4e 81       	ldd	r20, Y+6	; 0x06
     720:	5f 81       	ldd	r21, Y+7	; 0x07
     722:	41 30       	cpi	r20, 0x01	; 1
     724:	51 05       	cpc	r21, r1
     726:	59 f1       	breq	.+86     	; 0x77e <DIO_ReadPinValue+0x9c>
     728:	8e 81       	ldd	r24, Y+6	; 0x06
     72a:	9f 81       	ldd	r25, Y+7	; 0x07
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	91 05       	cpc	r25, r1
     730:	34 f4       	brge	.+12     	; 0x73e <DIO_ReadPinValue+0x5c>
     732:	2e 81       	ldd	r18, Y+6	; 0x06
     734:	3f 81       	ldd	r19, Y+7	; 0x07
     736:	21 15       	cp	r18, r1
     738:	31 05       	cpc	r19, r1
     73a:	69 f0       	breq	.+26     	; 0x756 <DIO_ReadPinValue+0x74>
     73c:	5c c0       	rjmp	.+184    	; 0x7f6 <DIO_ReadPinValue+0x114>
     73e:	4e 81       	ldd	r20, Y+6	; 0x06
     740:	5f 81       	ldd	r21, Y+7	; 0x07
     742:	42 30       	cpi	r20, 0x02	; 2
     744:	51 05       	cpc	r21, r1
     746:	79 f1       	breq	.+94     	; 0x7a6 <DIO_ReadPinValue+0xc4>
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	9f 81       	ldd	r25, Y+7	; 0x07
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	91 05       	cpc	r25, r1
     750:	09 f4       	brne	.+2      	; 0x754 <DIO_ReadPinValue+0x72>
     752:	3d c0       	rjmp	.+122    	; 0x7ce <DIO_ReadPinValue+0xec>
     754:	50 c0       	rjmp	.+160    	; 0x7f6 <DIO_ReadPinValue+0x114>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = GET_BIT(PINA,copy_DIO_pin);
     756:	e9 e3       	ldi	r30, 0x39	; 57
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	88 2f       	mov	r24, r24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	a9 01       	movw	r20, r18
     768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_ReadPinValue+0x8c>
     76a:	55 95       	asr	r21
     76c:	47 95       	ror	r20
     76e:	8a 95       	dec	r24
     770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_ReadPinValue+0x88>
     772:	ca 01       	movw	r24, r20
     774:	81 70       	andi	r24, 0x01	; 1
     776:	ec 81       	ldd	r30, Y+4	; 0x04
     778:	fd 81       	ldd	r31, Y+5	; 0x05
     77a:	80 83       	st	Z, r24
     77c:	3f c0       	rjmp	.+126    	; 0x7fc <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = GET_BIT(PINB,copy_DIO_pin);
     77e:	e6 e3       	ldi	r30, 0x36	; 54
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_ReadPinValue+0xb4>
     792:	55 95       	asr	r21
     794:	47 95       	ror	r20
     796:	8a 95       	dec	r24
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_ReadPinValue+0xb0>
     79a:	ca 01       	movw	r24, r20
     79c:	81 70       	andi	r24, 0x01	; 1
     79e:	ec 81       	ldd	r30, Y+4	; 0x04
     7a0:	fd 81       	ldd	r31, Y+5	; 0x05
     7a2:	80 83       	st	Z, r24
     7a4:	2b c0       	rjmp	.+86     	; 0x7fc <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = GET_BIT(PINC,copy_DIO_pin);
     7a6:	e3 e3       	ldi	r30, 0x33	; 51
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a9 01       	movw	r20, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_ReadPinValue+0xdc>
     7ba:	55 95       	asr	r21
     7bc:	47 95       	ror	r20
     7be:	8a 95       	dec	r24
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_ReadPinValue+0xd8>
     7c2:	ca 01       	movw	r24, r20
     7c4:	81 70       	andi	r24, 0x01	; 1
     7c6:	ec 81       	ldd	r30, Y+4	; 0x04
     7c8:	fd 81       	ldd	r31, Y+5	; 0x05
     7ca:	80 83       	st	Z, r24
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <DIO_ReadPinValue+0x11a>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = GET_BIT(PIND,copy_DIO_pin);
     7ce:	e0 e3       	ldi	r30, 0x30	; 48
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a9 01       	movw	r20, r18
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_ReadPinValue+0x104>
     7e2:	55 95       	asr	r21
     7e4:	47 95       	ror	r20
     7e6:	8a 95       	dec	r24
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_ReadPinValue+0x100>
     7ea:	ca 01       	movw	r24, r20
     7ec:	81 70       	andi	r24, 0x01	; 1
     7ee:	ec 81       	ldd	r30, Y+4	; 0x04
     7f0:	fd 81       	ldd	r31, Y+5	; 0x05
     7f2:	80 83       	st	Z, r24
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <DIO_ReadPinValue+0x11a>
				break;
			default:
				local_errorState = NOT_OK_STAT;
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <DIO_ReadPinValue+0x11a>
				break;
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
     7fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorState;
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
}
     7fe:	27 96       	adiw	r28, 0x07	; 7
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <DIO_togglePinValue>:

uint8 DIO_togglePinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	00 d0       	rcall	.+0      	; 0x816 <DIO_togglePinValue+0x6>
     816:	00 d0       	rcall	.+0      	; 0x818 <DIO_togglePinValue+0x8>
     818:	0f 92       	push	r0
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorState = OK_STAT;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_DIO_port)
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	3d 83       	std	Y+5, r19	; 0x05
     82e:	2c 83       	std	Y+4, r18	; 0x04
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	91 05       	cpc	r25, r1
     838:	49 f1       	breq	.+82     	; 0x88c <__stack+0x2d>
     83a:	2c 81       	ldd	r18, Y+4	; 0x04
     83c:	3d 81       	ldd	r19, Y+5	; 0x05
     83e:	22 30       	cpi	r18, 0x02	; 2
     840:	31 05       	cpc	r19, r1
     842:	2c f4       	brge	.+10     	; 0x84e <DIO_togglePinValue+0x3e>
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	00 97       	sbiw	r24, 0x00	; 0
     84a:	61 f0       	breq	.+24     	; 0x864 <__stack+0x5>
     84c:	5b c0       	rjmp	.+182    	; 0x904 <__stack+0xa5>
     84e:	2c 81       	ldd	r18, Y+4	; 0x04
     850:	3d 81       	ldd	r19, Y+5	; 0x05
     852:	22 30       	cpi	r18, 0x02	; 2
     854:	31 05       	cpc	r19, r1
     856:	71 f1       	breq	.+92     	; 0x8b4 <__stack+0x55>
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	91 05       	cpc	r25, r1
     860:	e9 f1       	breq	.+122    	; 0x8dc <__stack+0x7d>
     862:	50 c0       	rjmp	.+160    	; 0x904 <__stack+0xa5>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA,copy_DIO_pin);
     864:	ab e3       	ldi	r26, 0x3B	; 59
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	eb e3       	ldi	r30, 0x3B	; 59
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	48 2f       	mov	r20, r24
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	02 2e       	mov	r0, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	0a 94       	dec	r0
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	84 27       	eor	r24, r20
     888:	8c 93       	st	X, r24
     88a:	3d c0       	rjmp	.+122    	; 0x906 <__stack+0xa7>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB,copy_DIO_pin);
     88c:	a8 e3       	ldi	r26, 0x38	; 56
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	e8 e3       	ldi	r30, 0x38	; 56
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	48 2f       	mov	r20, r24
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 2e       	mov	r0, r18
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	0a 94       	dec	r0
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	84 27       	eor	r24, r20
     8b0:	8c 93       	st	X, r24
     8b2:	29 c0       	rjmp	.+82     	; 0x906 <__stack+0xa7>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC,copy_DIO_pin);
     8b4:	a5 e3       	ldi	r26, 0x35	; 53
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e5 e3       	ldi	r30, 0x35	; 53
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	48 2f       	mov	r20, r24
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	28 2f       	mov	r18, r24
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 2e       	mov	r0, r18
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	0a 94       	dec	r0
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
     8d6:	84 27       	eor	r24, r20
     8d8:	8c 93       	st	X, r24
     8da:	15 c0       	rjmp	.+42     	; 0x906 <__stack+0xa7>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD,copy_DIO_pin);
     8dc:	a2 e3       	ldi	r26, 0x32	; 50
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	e2 e3       	ldi	r30, 0x32	; 50
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	48 2f       	mov	r20, r24
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	28 2f       	mov	r18, r24
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	02 2e       	mov	r0, r18
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	0a 94       	dec	r0
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	84 27       	eor	r24, r20
     900:	8c 93       	st	X, r24
     902:	01 c0       	rjmp	.+2      	; 0x906 <__stack+0xa7>
			break;
		default:
			local_errorState = NOT_OK_STAT;
     904:	19 82       	std	Y+1, r1	; 0x01
		}
	return local_errorState;
     906:	89 81       	ldd	r24, Y+1	; 0x01
}
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	08 95       	ret

00000918 <DIO_setPortDirection>:
uint8 DIO_setPortDirection(uint8 copy_DIO_port,  uint8 copy_DIO_direction)
{
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	00 d0       	rcall	.+0      	; 0x91e <DIO_setPortDirection+0x6>
     91e:	00 d0       	rcall	.+0      	; 0x920 <DIO_setPortDirection+0x8>
     920:	0f 92       	push	r0
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	8a 83       	std	Y+2, r24	; 0x02
     928:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_direction == PORT_OUTPUT) || (copy_DIO_direction == PORT_INPUT))
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	19 f0       	breq	.+6      	; 0x93a <DIO_setPortDirection+0x22>
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	88 23       	and	r24, r24
     938:	a1 f5       	brne	.+104    	; 0x9a2 <DIO_setPortDirection+0x8a>
		{
			switch (copy_DIO_direction)
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	28 2f       	mov	r18, r24
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	3d 83       	std	Y+5, r19	; 0x05
     942:	2c 83       	std	Y+4, r18	; 0x04
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	9d 81       	ldd	r25, Y+5	; 0x05
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	91 05       	cpc	r25, r1
     94c:	d1 f0       	breq	.+52     	; 0x982 <DIO_setPortDirection+0x6a>
     94e:	2c 81       	ldd	r18, Y+4	; 0x04
     950:	3d 81       	ldd	r19, Y+5	; 0x05
     952:	22 30       	cpi	r18, 0x02	; 2
     954:	31 05       	cpc	r19, r1
     956:	2c f4       	brge	.+10     	; 0x962 <DIO_setPortDirection+0x4a>
     958:	8c 81       	ldd	r24, Y+4	; 0x04
     95a:	9d 81       	ldd	r25, Y+5	; 0x05
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	61 f0       	breq	.+24     	; 0x978 <DIO_setPortDirection+0x60>
     960:	1f c0       	rjmp	.+62     	; 0x9a0 <DIO_setPortDirection+0x88>
     962:	2c 81       	ldd	r18, Y+4	; 0x04
     964:	3d 81       	ldd	r19, Y+5	; 0x05
     966:	22 30       	cpi	r18, 0x02	; 2
     968:	31 05       	cpc	r19, r1
     96a:	81 f0       	breq	.+32     	; 0x98c <DIO_setPortDirection+0x74>
     96c:	8c 81       	ldd	r24, Y+4	; 0x04
     96e:	9d 81       	ldd	r25, Y+5	; 0x05
     970:	83 30       	cpi	r24, 0x03	; 3
     972:	91 05       	cpc	r25, r1
     974:	81 f0       	breq	.+32     	; 0x996 <DIO_setPortDirection+0x7e>
     976:	14 c0       	rjmp	.+40     	; 0x9a0 <DIO_setPortDirection+0x88>
			{
				case DIO_PORTA:
					DDRA = copy_DIO_direction;
     978:	ea e3       	ldi	r30, 0x3A	; 58
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	80 83       	st	Z, r24
     980:	10 c0       	rjmp	.+32     	; 0x9a2 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTB:
					DDRB = copy_DIO_direction;
     982:	e7 e3       	ldi	r30, 0x37	; 55
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	80 83       	st	Z, r24
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTC:
					DDRC = copy_DIO_direction;
     98c:	e4 e3       	ldi	r30, 0x34	; 52
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	80 83       	st	Z, r24
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTD:
					DDRD = copy_DIO_direction;
     996:	e1 e3       	ldi	r30, 0x31	; 49
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	80 83       	st	Z, r24
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <DIO_setPortDirection+0x8a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
     9a0:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
		}
	return local_errorSignal;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <DIO_setPortValue>:

uint8 DIO_setPortValue(uint8 copy_DIO_port, uint8 copy_DIO_value)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <DIO_setPortValue+0x6>
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <DIO_setPortValue+0x8>
     9bc:	0f 92       	push	r0
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	8a 83       	std	Y+2, r24	; 0x02
     9c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_DIO_port)
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	3d 83       	std	Y+5, r19	; 0x05
     9d2:	2c 83       	std	Y+4, r18	; 0x04
     9d4:	8c 81       	ldd	r24, Y+4	; 0x04
     9d6:	9d 81       	ldd	r25, Y+5	; 0x05
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	91 05       	cpc	r25, r1
     9dc:	d1 f0       	breq	.+52     	; 0xa12 <DIO_setPortValue+0x5e>
     9de:	2c 81       	ldd	r18, Y+4	; 0x04
     9e0:	3d 81       	ldd	r19, Y+5	; 0x05
     9e2:	22 30       	cpi	r18, 0x02	; 2
     9e4:	31 05       	cpc	r19, r1
     9e6:	2c f4       	brge	.+10     	; 0x9f2 <DIO_setPortValue+0x3e>
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	61 f0       	breq	.+24     	; 0xa08 <DIO_setPortValue+0x54>
     9f0:	1f c0       	rjmp	.+62     	; 0xa30 <DIO_setPortValue+0x7c>
     9f2:	2c 81       	ldd	r18, Y+4	; 0x04
     9f4:	3d 81       	ldd	r19, Y+5	; 0x05
     9f6:	22 30       	cpi	r18, 0x02	; 2
     9f8:	31 05       	cpc	r19, r1
     9fa:	81 f0       	breq	.+32     	; 0xa1c <DIO_setPortValue+0x68>
     9fc:	8c 81       	ldd	r24, Y+4	; 0x04
     9fe:	9d 81       	ldd	r25, Y+5	; 0x05
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	91 05       	cpc	r25, r1
     a04:	81 f0       	breq	.+32     	; 0xa26 <DIO_setPortValue+0x72>
     a06:	14 c0       	rjmp	.+40     	; 0xa30 <DIO_setPortValue+0x7c>
	{
		case DIO_PORTA:
			PORTA = copy_DIO_value;
     a08:	eb e3       	ldi	r30, 0x3B	; 59
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	80 83       	st	Z, r24
     a10:	10 c0       	rjmp	.+32     	; 0xa32 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = copy_DIO_value;
     a12:	e8 e3       	ldi	r30, 0x38	; 56
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	80 83       	st	Z, r24
     a1a:	0b c0       	rjmp	.+22     	; 0xa32 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = copy_DIO_value;
     a1c:	e5 e3       	ldi	r30, 0x35	; 53
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	80 83       	st	Z, r24
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = copy_DIO_value;
     a26:	e2 e3       	ldi	r30, 0x32	; 50
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	80 83       	st	Z, r24
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <DIO_setPortValue+0x7e>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
     a30:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
     a32:	89 81       	ldd	r24, Y+1	; 0x01
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <DIO_ReadPortValue>:

uint8 DIO_ReadPortValue(uint8 copy_DIO_port,  uint8 *copy_DIO_pValue)
{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	00 d0       	rcall	.+0      	; 0xa4a <DIO_ReadPortValue+0x6>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <DIO_ReadPortValue+0x8>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <DIO_ReadPortValue+0xa>
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	8a 83       	std	Y+2, r24	; 0x02
     a54:	7c 83       	std	Y+4, r23	; 0x04
     a56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_port <= DIO_PORTD) && (copy_DIO_pValue != NULL))
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	08 f0       	brcs	.+2      	; 0xa64 <DIO_ReadPortValue+0x20>
     a62:	40 c0       	rjmp	.+128    	; 0xae4 <DIO_ReadPortValue+0xa0>
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	e1 f1       	breq	.+120    	; 0xae4 <DIO_ReadPortValue+0xa0>
	{
		switch (copy_DIO_port)
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	3e 83       	std	Y+6, r19	; 0x06
     a74:	2d 83       	std	Y+5, r18	; 0x05
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	9e 81       	ldd	r25, Y+6	; 0x06
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	91 05       	cpc	r25, r1
     a7e:	e1 f0       	breq	.+56     	; 0xab8 <DIO_ReadPortValue+0x74>
     a80:	2d 81       	ldd	r18, Y+5	; 0x05
     a82:	3e 81       	ldd	r19, Y+6	; 0x06
     a84:	22 30       	cpi	r18, 0x02	; 2
     a86:	31 05       	cpc	r19, r1
     a88:	2c f4       	brge	.+10     	; 0xa94 <DIO_ReadPortValue+0x50>
     a8a:	8d 81       	ldd	r24, Y+5	; 0x05
     a8c:	9e 81       	ldd	r25, Y+6	; 0x06
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	61 f0       	breq	.+24     	; 0xaaa <DIO_ReadPortValue+0x66>
     a92:	27 c0       	rjmp	.+78     	; 0xae2 <DIO_ReadPortValue+0x9e>
     a94:	2d 81       	ldd	r18, Y+5	; 0x05
     a96:	3e 81       	ldd	r19, Y+6	; 0x06
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	31 05       	cpc	r19, r1
     a9c:	a1 f0       	breq	.+40     	; 0xac6 <DIO_ReadPortValue+0x82>
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	9e 81       	ldd	r25, Y+6	; 0x06
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	91 05       	cpc	r25, r1
     aa6:	b1 f0       	breq	.+44     	; 0xad4 <DIO_ReadPortValue+0x90>
     aa8:	1c c0       	rjmp	.+56     	; 0xae2 <DIO_ReadPortValue+0x9e>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = PINA;
     aaa:	e9 e3       	ldi	r30, 0x39	; 57
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	eb 81       	ldd	r30, Y+3	; 0x03
     ab2:	fc 81       	ldd	r31, Y+4	; 0x04
     ab4:	80 83       	st	Z, r24
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = PINB;
     ab8:	e6 e3       	ldi	r30, 0x36	; 54
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	eb 81       	ldd	r30, Y+3	; 0x03
     ac0:	fc 81       	ldd	r31, Y+4	; 0x04
     ac2:	80 83       	st	Z, r24
     ac4:	0f c0       	rjmp	.+30     	; 0xae4 <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = PINC;
     ac6:	e3 e3       	ldi	r30, 0x33	; 51
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	80 83       	st	Z, r24
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = PIND;
     ad4:	e0 e3       	ldi	r30, 0x30	; 48
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	eb 81       	ldd	r30, Y+3	; 0x03
     adc:	fc 81       	ldd	r31, Y+4	; 0x04
     ade:	80 83       	st	Z, r24
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <DIO_ReadPortValue+0xa0>
				break;
			default:
				local_errorSignal = NOT_OK_STAT;
     ae2:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}

	return local_errorSignal;
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ae6:	26 96       	adiw	r28, 0x06	; 6
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <DIO_setIntPullUpRes>:

uint8 DIO_setIntPullUpRes(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	00 d0       	rcall	.+0      	; 0xafe <DIO_setIntPullUpRes+0x6>
     afe:	0f 92       	push	r0
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	8a 83       	std	Y+2, r24	; 0x02
     b06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorSignal = OK_STAT;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinDirection(copy_DIO_port,copy_DIO_pin,INPUT);
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	6b 81       	ldd	r22, Y+3	; 0x03
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
     b16:	89 83       	std	Y+1, r24	; 0x01
	if (local_errorSignal == OK_STAT)
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	31 f4       	brne	.+12     	; 0xb2a <DIO_setIntPullUpRes+0x32>
	{
		local_errorSignal = DIO_setPinValue(copy_DIO_port,copy_DIO_pin,HIGH);
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	6b 81       	ldd	r22, Y+3	; 0x03
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_setPinValue>
     b28:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <TIMER0_init>:
#include "TIMER_Private.h"
#include "TIMER_Interface.h"


void TIMER0_init(void)
{
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR_WGM01);
	//SET_BIT(TCCR0,TCCR_FOC0);
	OCR0 = OCR_TICK_NUMS;

#elif (TIMER0_WAVE_GEN_MODE == TIMER0_PWN_FAST)
	SET_BIT(TCCR0,TCCR_WGM00);
     b40:	a3 e5       	ldi	r26, 0x53	; 83
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e3 e5       	ldi	r30, 0x53	; 83
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	80 64       	ori	r24, 0x40	; 64
     b4c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR_WGM01);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR_FOC0);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	OCR0 = OCR_COMP_VALUE;
     b6a:	ec e5       	ldi	r30, 0x5C	; 92
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8f e7       	ldi	r24, 0x7F	; 127
     b70:	80 83       	st	Z, r24
#if (TIMER0_COMPARE_MATCH_MODE_F_PWM == TIMER0_COMP_NORMAL_F_PWM)
	CLEAR_BIT(TCCR0,TCCR_COM00);
	CLEAR_BIT(TCCR0,TCCR_COM01);

#elif (TIMER0_COMPARE_MATCH_MODE_F_PWM == TIMER0_COMP_CLEAR_F_PWM)
	CLEAR_BIT(TCCR0,TCCR_COM00);
     b72:	a3 e5       	ldi	r26, 0x53	; 83
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e3 e5       	ldi	r30, 0x53	; 83
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8f 7e       	andi	r24, 0xEF	; 239
     b7e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR_COM01);
     b80:	a3 e5       	ldi	r26, 0x53	; 83
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e3 e5       	ldi	r30, 0x53	; 83
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 62       	ori	r24, 0x20	; 32
     b8c:	8c 93       	st	X, r24
#error "WRONG OPERATION MODE CONFIGURATION"
#endif


	/*Pre-select Configurations*/
	TCCR0 &= 0b11111000;
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 7f       	andi	r24, 0xF8	; 248
     b9a:	8c 93       	st	X, r24
	TCCR0 |= CLOCK_CYCLE_SELECTED;
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	8c 93       	st	X, r24
	DIO_setPinDirection(DIO_PORTB,PIN3,OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	63 e0       	ldi	r22, 0x03	; 3
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
	TCNT0 = 0x00;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
}
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <TIMER1_init>:

void TIMER1_init(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1B,TCCR1B_WGM13);

	ICR1 = 40000;
#elif (TIMER1_WAVE_GEN_MODE == TIMER1_PWM_F_ICR1)
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
     bc8:	af e4       	ldi	r26, 0x4F	; 79
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ef e4       	ldi	r30, 0x4F	; 79
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     bd6:	af e4       	ldi	r26, 0x4F	; 79
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ef e4       	ldi	r30, 0x4F	; 79
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     be4:	ae e4       	ldi	r26, 0x4E	; 78
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ee e4       	ldi	r30, 0x4E	; 78
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 60       	ori	r24, 0x08	; 8
     bf0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     bf2:	ae e4       	ldi	r26, 0x4E	; 78
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ee e4       	ldi	r30, 0x4E	; 78
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	8c 93       	st	X, r24

	ICR1 = ICR1_TIMER_1;
     c00:	e6 e4       	ldi	r30, 0x46	; 70
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 e4       	ldi	r24, 0x40	; 64
     c06:	9c e9       	ldi	r25, 0x9C	; 156
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	80 83       	st	Z, r24
	OCR1A = 2560;
     c0c:	ea e4       	ldi	r30, 0x4A	; 74
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	9a e0       	ldi	r25, 0x0A	; 10
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	80 83       	st	Z, r24
#elif (TIMER1_COMPARE_MATCH_MODE_F_PWM_A == TIMER1_COMP_TOGGLE_F_PWM_A)
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
	SET_BIT(TCCR1A,TCCR1A_COM1A0);

#elif (TIMER1_COMPARE_MATCH_MODE_F_PWM_A == TIMER1_COMP_CLEAR_ON_COMP_F_PWM_A)
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
     c18:	af e4       	ldi	r26, 0x4F	; 79
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ef e4       	ldi	r30, 0x4F	; 79
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 68       	ori	r24, 0x80	; 128
     c24:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
     c26:	af e4       	ldi	r26, 0x4F	; 79
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ef e4       	ldi	r30, 0x4F	; 79
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8f 7b       	andi	r24, 0xBF	; 191
     c32:	8c 93       	st	X, r24
#endif

#endif

	/* PRESCALING */
	TCCR1B &= 11111000;
     c34:	ae e4       	ldi	r26, 0x4E	; 78
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ee e4       	ldi	r30, 0x4E	; 78
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 75       	andi	r24, 0x58	; 88
     c40:	8c 93       	st	X, r24
	TCCR1B |= CLOCK_CYCLE_SELECTED;
     c42:	ae e4       	ldi	r26, 0x4E	; 78
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ee e4       	ldi	r30, 0x4E	; 78
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	8c 93       	st	X, r24

#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	65 e0       	ldi	r22, 0x05	; 5
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>


	//OCR1A = 3000;


}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <TIMER1_normal>:

void TIMER1_normal(void)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	/*	Wave Generation Configuration	*/
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
     c68:	af e4       	ldi	r26, 0x4F	; 79
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ef e4       	ldi	r30, 0x4F	; 79
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
     c76:	af e4       	ldi	r26, 0x4F	; 79
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ef e4       	ldi	r30, 0x4F	; 79
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
     c84:	ae e4       	ldi	r26, 0x4E	; 78
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ee e4       	ldi	r30, 0x4E	; 78
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	87 7f       	andi	r24, 0xF7	; 247
     c90:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
     c92:	ae e4       	ldi	r26, 0x4E	; 78
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ee e4       	ldi	r30, 0x4E	; 78
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	8c 93       	st	X, r24
#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)



#if (TIMER1_COMPARE_MATCH_MODE_NO_PWM_A == TIMER1_COMP_NORMAL_NO_PWM_A)
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
     ca0:	af e4       	ldi	r26, 0x4F	; 79
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ef e4       	ldi	r30, 0x4F	; 79
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
     cae:	af e4       	ldi	r26, 0x4F	; 79
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ef e4       	ldi	r30, 0x4F	; 79
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	8c 93       	st	X, r24
#endif

#endif

	/* PRESCALING */
	TCCR1B &= 11111000;
     cbc:	ae e4       	ldi	r26, 0x4E	; 78
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ee e4       	ldi	r30, 0x4E	; 78
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 75       	andi	r24, 0x58	; 88
     cc8:	8c 93       	st	X, r24
	TCCR1B |= CLOCK_CYCLE_SELECTED;
     cca:	ae e4       	ldi	r26, 0x4E	; 78
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	8c 93       	st	X, r24

#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	65 e0       	ldi	r22, 0x05	; 5
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>

#if (CHANNEL_B_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);
#endif

}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <TIMER1_CTC>:

void TIMER1_CTC(uint16 copy_upper_limit)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <TIMER1_CTC+0x6>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
	/*	COMPARE MODE */
#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)


#if (TIMER1_COMPARE_MATCH_MODE_NO_PWM_A == TIMER1_COMP_NORMAL_NO_PWM_A)
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
     cf6:	af e4       	ldi	r26, 0x4F	; 79
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ef e4       	ldi	r30, 0x4F	; 79
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
     d04:	af e4       	ldi	r26, 0x4F	; 79
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ef e4       	ldi	r30, 0x4F	; 79
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7b       	andi	r24, 0xBF	; 191
     d10:	8c 93       	st	X, r24

#endif


	/* PRESCALING */
	TCCR1B &= 11111000;
     d12:	ae e4       	ldi	r26, 0x4E	; 78
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ee e4       	ldi	r30, 0x4E	; 78
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	88 75       	andi	r24, 0x58	; 88
     d1e:	8c 93       	st	X, r24
	TCCR1B |= CLOCK_CYCLE_SELECTED;
     d20:	ae e4       	ldi	r26, 0x4E	; 78
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ee e4       	ldi	r30, 0x4E	; 78
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	8c 93       	st	X, r24

#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	65 e0       	ldi	r22, 0x05	; 5
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>

#if (CHANNEL_B_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);
#endif

}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <TIMER1_fastPWM>:

void TIMER1_fastPWM(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,TCCR1A_WGM11);
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);

#elif (TIMER1_WAVE_GEN_MODE == TIMER1_PWM_F_ICR1)
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
     d4a:	af e4       	ldi	r26, 0x4F	; 79
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ef e4       	ldi	r30, 0x4F	; 79
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8e 7f       	andi	r24, 0xFE	; 254
     d56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     d58:	af e4       	ldi	r26, 0x4F	; 79
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ef e4       	ldi	r30, 0x4F	; 79
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     d66:	ae e4       	ldi	r26, 0x4E	; 78
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     d74:	ae e4       	ldi	r26, 0x4E	; 78
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ee e4       	ldi	r30, 0x4E	; 78
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 61       	ori	r24, 0x10	; 16
     d80:	8c 93       	st	X, r24

	ICR1 = ICR1_TIMER_1;
     d82:	e6 e4       	ldi	r30, 0x46	; 70
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	9c e9       	ldi	r25, 0x9C	; 156
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	OCR1A = 2000;
     d8e:	ea e4       	ldi	r30, 0x4A	; 74
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 ed       	ldi	r24, 0xD0	; 208
     d94:	97 e0       	ldi	r25, 0x07	; 7
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
#elif (TIMER1_COMPARE_MATCH_MODE_F_PWM_A == TIMER1_COMP_TOGGLE_F_PWM_A)
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
	SET_BIT(TCCR1A,TCCR1A_COM1A0);

#elif (TIMER1_COMPARE_MATCH_MODE_F_PWM_A == TIMER1_COMP_CLEAR_ON_COMP_F_PWM_A)
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
     d9a:	af e4       	ldi	r26, 0x4F	; 79
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e4       	ldi	r30, 0x4F	; 79
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
     da8:	af e4       	ldi	r26, 0x4F	; 79
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ef e4       	ldi	r30, 0x4F	; 79
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	8c 93       	st	X, r24

#endif
#endif

	/* PRESCALING */
	TCCR1B &= 11111000;
     db6:	ae e4       	ldi	r26, 0x4E	; 78
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ee e4       	ldi	r30, 0x4E	; 78
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 75       	andi	r24, 0x58	; 88
     dc2:	8c 93       	st	X, r24
	TCCR1B |= CLOCK_CYCLE_SELECTED;
     dc4:	ae e4       	ldi	r26, 0x4E	; 78
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ee e4       	ldi	r30, 0x4E	; 78
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	82 60       	ori	r24, 0x02	; 2
     dd0:	8c 93       	st	X, r24

#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	65 e0       	ldi	r22, 0x05	; 5
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>

#if (CHANNEL_B_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);
#endif

}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <TIMER1_phaseCorrectPWM>:

void TIMER1_phaseCorrectPWM(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62

#endif


	/* PRESCALING */
	TCCR1B &= 11111000;
     dea:	ae e4       	ldi	r26, 0x4E	; 78
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ee e4       	ldi	r30, 0x4E	; 78
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 75       	andi	r24, 0x58	; 88
     df6:	8c 93       	st	X, r24
	TCCR1B |= CLOCK_CYCLE_SELECTED;
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ee e4       	ldi	r30, 0x4E	; 78
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	82 60       	ori	r24, 0x02	; 2
     e04:	8c 93       	st	X, r24

#if (CHANNEL_A_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	65 e0       	ldi	r22, 0x05	; 5
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>

#if (CHANNEL_B_STATUS == CHANNEL_ENABLED)
	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);
#endif

}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <TIMER2_init>:

void TIMER2_init(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,TCCR2_WGM21);

	OCR2 = 200;

#elif (TIMER2_WAVE_GEN_MODE == TIMER2_PWN_FAST)
	SET_BIT(TCCR2,TCCR2_WGM20);
     e1e:	a5 e4       	ldi	r26, 0x45	; 69
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e4       	ldi	r30, 0x45	; 69
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	80 64       	ori	r24, 0x40	; 64
     e2a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
     e2c:	a5 e4       	ldi	r26, 0x45	; 69
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e4       	ldi	r30, 0x45	; 69
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	88 60       	ori	r24, 0x08	; 8
     e38:	8c 93       	st	X, r24
	OCR2 = 200;
     e3a:	e3 e4       	ldi	r30, 0x43	; 67
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	80 83       	st	Z, r24
#if (TIMER2_COMPARE_MATCH_MODE_F_PWM == TIMER2_COMP_NORMAL_F_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM21);
	CLEAR_BIT(TCCR2,TCCR2_COM20);

#elif (TIMER2_COMPARE_MATCH_MODE_F_PWM == TIMER2_COMP_CLEAR_F_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM20);
     e42:	a5 e4       	ldi	r26, 0x45	; 69
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e4       	ldi	r30, 0x45	; 69
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
     e50:	a5 e4       	ldi	r26, 0x45	; 69
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e5 e4       	ldi	r30, 0x45	; 69
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	8c 93       	st	X, r24
#endif

#endif

#if ((TIMER2_COMPARE_MATCH_MODE_NO_PWM != TIMER2_COMPARE_MATCH_MODE_NO_PWM) || (TIMER2_COMPARE_MATCH_MODE_F_PWM == TIMER2_COMPARE_MATCH_MODE_F_PWM) || (TIMER2_COMPARE_MATCH_MODE_PC_PWM == TIMER2_COMPARE_MATCH_MODE_PC_PWM))
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	67 e0       	ldi	r22, 0x07	; 7
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
#endif
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <TIMER2_normal>:

void TIMER2_normal(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	/* Wave Generation */
	CLEAR_BIT(TCCR2,TCCR2_WGM20);
     e76:	a5 e4       	ldi	r26, 0x45	; 69
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e4       	ldi	r30, 0x45	; 69
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8f 7b       	andi	r24, 0xBF	; 191
     e82:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_WGM21);
     e84:	a5 e4       	ldi	r26, 0x45	; 69
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e4       	ldi	r30, 0x45	; 69
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	87 7f       	andi	r24, 0xF7	; 247
     e90:	8c 93       	st	X, r24
#if (TIMER2_COMPARE_MATCH_MODE_NO_PWM == TIMER2_COMP_NORMAL_NO_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM21);
	CLEAR_BIT(TCCR2,TCCR2_COM20);

#elif (TIMER2_COMPARE_MATCH_MODE_NO_PWM == TIMER2_COMP_TOGGLE_NO_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM21);
     e92:	a5 e4       	ldi	r26, 0x45	; 69
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e5 e4       	ldi	r30, 0x45	; 69
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM20);
     ea0:	a5 e4       	ldi	r26, 0x45	; 69
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e4       	ldi	r30, 0x45	; 69
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 61       	ori	r24, 0x10	; 16
     eac:	8c 93       	st	X, r24
#else
#error "WRONG CONFIGURATIONS !!"
#endif

	/* Pre-Scaling Configuration */
	TCCR2 &= 0b11111000;
     eae:	a5 e4       	ldi	r26, 0x45	; 69
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e4       	ldi	r30, 0x45	; 69
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 7f       	andi	r24, 0xF8	; 248
     eba:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALING_64_MASK;
     ebc:	a5 e4       	ldi	r26, 0x45	; 69
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e4       	ldi	r30, 0x45	; 69
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	84 60       	ori	r24, 0x04	; 4
     ec8:	8c 93       	st	X, r24

#if (TIMER2_COMPARE_MATCH_MODE_NO_PWM != TIMER2_COMPARE_MATCH_MODE_NO_PWM)
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
#endif
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <TIMER2_CTC_>:

void TIMER2_CTC_(uint8 copy_upper_limit)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	/* Wave Generation */
	CLEAR_BIT(TCCR2,TCCR2_WGM20);
     edc:	a5 e4       	ldi	r26, 0x45	; 69
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e4       	ldi	r30, 0x45	; 69
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7b       	andi	r24, 0xBF	; 191
     ee8:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
     eea:	a5 e4       	ldi	r26, 0x45	; 69
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e4       	ldi	r30, 0x45	; 69
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
	OCR2 = copy_upper_limit;
     ef8:	e3 e4       	ldi	r30, 0x43	; 67
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	80 83       	st	Z, r24

#if (TIMER2_COMPARE_MATCH_MODE_NO_PWM == TIMER2_COMPARE_MATCH_MODE_NO_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM21);
     f00:	a5 e4       	ldi	r26, 0x45	; 69
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e4       	ldi	r30, 0x45	; 69
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7d       	andi	r24, 0xDF	; 223
     f0c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_COM20);
     f0e:	a5 e4       	ldi	r26, 0x45	; 69
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e4       	ldi	r30, 0x45	; 69
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	8c 93       	st	X, r24
#else
#error "WRONG CONFIGURATIONS !!"
#endif

	/* Pre-Scaling Configuration */
	TCCR2 &= 0b11111000;
     f1c:	a5 e4       	ldi	r26, 0x45	; 69
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e4       	ldi	r30, 0x45	; 69
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 7f       	andi	r24, 0xF8	; 248
     f28:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALING_64_MASK;
     f2a:	a5 e4       	ldi	r26, 0x45	; 69
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e4       	ldi	r30, 0x45	; 69
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	8c 93       	st	X, r24

#if (TIMER2_COMPARE_MATCH_MODE_NO_PWM != TIMER2_COMPARE_MATCH_MODE_NO_PWM)
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
#endif
}
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TIMER2_fastPWM>:

void TIMER2_fastPWM(uint8 copy_compare_num)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	89 83       	std	Y+1, r24	; 0x01
	/* Wave Generation */
	SET_BIT(TCCR2,TCCR2_WGM20);
     f4c:	a5 e4       	ldi	r26, 0x45	; 69
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e4       	ldi	r30, 0x45	; 69
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	80 64       	ori	r24, 0x40	; 64
     f58:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
     f5a:	a5 e4       	ldi	r26, 0x45	; 69
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e5 e4       	ldi	r30, 0x45	; 69
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	8c 93       	st	X, r24
#if (TIMER2_COMPARE_MATCH_MODE_F_PWM == TIMER2_COMP_NORMAL_F_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM21);
	CLEAR_BIT(TCCR2,TCCR2_COM20);

#elif (TIMER2_COMPARE_MATCH_MODE_F_PWM == TIMER2_COMP_CLEAR_F_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM20);
     f68:	a5 e4       	ldi	r26, 0x45	; 69
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e4       	ldi	r30, 0x45	; 69
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
     f76:	a5 e4       	ldi	r26, 0x45	; 69
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e4       	ldi	r30, 0x45	; 69
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 62       	ori	r24, 0x20	; 32
     f82:	8c 93       	st	X, r24

#else
#error "WRONG CONFIGURATIONS !!"
#endif

	OCR2 = copy_compare_num;
     f84:	e3 e4       	ldi	r30, 0x43	; 67
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	80 83       	st	Z, r24

	/* Pre-Scaling Configuration */
	TCCR2 &= 0b11111000;
     f8c:	a5 e4       	ldi	r26, 0x45	; 69
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e4       	ldi	r30, 0x45	; 69
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALING_64_MASK;
     f9a:	a5 e4       	ldi	r26, 0x45	; 69
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e4       	ldi	r30, 0x45	; 69
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	8c 93       	st	X, r24

#if (TIMER2_COMPARE_MATCH_MODE_F_PWM != TIMER2_COMP_NORMAL_F_PWM)
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	67 e0       	ldi	r22, 0x07	; 7
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
#endif

}
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TIMER2_phaseCorrectPWM>:

void TIMER2_phaseCorrectPWM(uint8 copy_compare_num)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/* Wave Generation */
	SET_BIT(TCCR2,TCCR2_WGM20);
     fc6:	a5 e4       	ldi	r26, 0x45	; 69
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e4       	ldi	r30, 0x45	; 69
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_WGM21);
     fd4:	a5 e4       	ldi	r26, 0x45	; 69
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e4       	ldi	r30, 0x45	; 69
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	8c 93       	st	X, r24
#elif (TIMER2_COMPARE_MATCH_MODE_PC_PWM == TIMER2_COMP_CLEAR_PC_PWM)
	CLEAR_BIT(TCCR2,TCCR2_COM20);
	SET_BIT(TCCR2,TCCR2_COM21);

#elif (TIMER2_COMPARE_MATCH_MODE_PC_PWM == TIMER2_COMP_SET_PC_PWM)
	SET_BIT(TCCR2,TCCR2_COM20);
     fe2:	a5 e4       	ldi	r26, 0x45	; 69
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e4       	ldi	r30, 0x45	; 69
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
     ff0:	a5 e4       	ldi	r26, 0x45	; 69
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e4       	ldi	r30, 0x45	; 69
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 62       	ori	r24, 0x20	; 32
     ffc:	8c 93       	st	X, r24

#else
#error "WRONG CONFIGURATIONS !!"
#endif

	OCR2 = copy_compare_num;
     ffe:	e3 e4       	ldi	r30, 0x43	; 67
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	80 83       	st	Z, r24
	/* Pre-Scaling Configuration */
	TCCR2 &= 0b11111000;
    1006:	a5 e4       	ldi	r26, 0x45	; 69
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e4       	ldi	r30, 0x45	; 69
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 7f       	andi	r24, 0xF8	; 248
    1012:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALING_64_MASK;
    1014:	a5 e4       	ldi	r26, 0x45	; 69
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e4       	ldi	r30, 0x45	; 69
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	8c 93       	st	X, r24

#if (TIMER2_COMPARE_MATCH_MODE_PC_PWM != TIMER2_COMP_NORMAL_PC_PWM)
	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	67 e0       	ldi	r22, 0x07	; 7
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
#endif
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <Delay_ms>:

void Delay_ms(uint32 time)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	2c 97       	sbiw	r28, 0x0c	; 12
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	69 87       	std	Y+9, r22	; 0x09
    104a:	7a 87       	std	Y+10, r23	; 0x0a
    104c:	8b 87       	std	Y+11, r24	; 0x0b
    104e:	9c 87       	std	Y+12, r25	; 0x0c
	uint32 local_ticks = 0;
    1050:	1d 82       	std	Y+5, r1	; 0x05
    1052:	1e 82       	std	Y+6, r1	; 0x06
    1054:	1f 82       	std	Y+7, r1	; 0x07
    1056:	18 86       	std	Y+8, r1	; 0x08
	uint32 local_map = (time * 1000 * 16) / (OCR_TICK_NUMS  * PRESCALING_VALUE);
    1058:	89 85       	ldd	r24, Y+9	; 0x09
    105a:	9a 85       	ldd	r25, Y+10	; 0x0a
    105c:	ab 85       	ldd	r26, Y+11	; 0x0b
    105e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1060:	20 e8       	ldi	r18, 0x80	; 128
    1062:	3e e3       	ldi	r19, 0x3E	; 62
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 c3 08 	call	0x1186	; 0x1186 <__mulsi3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	20 e4       	ldi	r18, 0x40	; 64
    1076:	36 e0       	ldi	r19, 0x06	; 6
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__udivmodsi4>
    1084:	da 01       	movw	r26, r20
    1086:	c9 01       	movw	r24, r18
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	ab 83       	std	Y+3, r26	; 0x03
    108e:	bc 83       	std	Y+4, r27	; 0x04
    1090:	1b c0       	rjmp	.+54     	; 0x10c8 <Delay_ms+0x94>
	while (local_ticks < local_map)
	{
		while (!(GET_BIT(TIFR,TIFR_TOV0)));
    1092:	e8 e5       	ldi	r30, 0x58	; 88
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	b9 f3       	breq	.-18     	; 0x1092 <Delay_ms+0x5e>
		(SET_BIT(TIFR,TIFR_TOV0));
    10a4:	a8 e5       	ldi	r26, 0x58	; 88
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e5       	ldi	r30, 0x58	; 88
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
		local_ticks++;
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	af 81       	ldd	r26, Y+7	; 0x07
    10b8:	b8 85       	ldd	r27, Y+8	; 0x08
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	a1 1d       	adc	r26, r1
    10be:	b1 1d       	adc	r27, r1
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	af 83       	std	Y+7, r26	; 0x07
    10c6:	b8 87       	std	Y+8, r27	; 0x08

void Delay_ms(uint32 time)
{
	uint32 local_ticks = 0;
	uint32 local_map = (time * 1000 * 16) / (OCR_TICK_NUMS  * PRESCALING_VALUE);
	while (local_ticks < local_map)
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	3e 81       	ldd	r19, Y+6	; 0x06
    10cc:	4f 81       	ldd	r20, Y+7	; 0x07
    10ce:	58 85       	ldd	r21, Y+8	; 0x08
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	4a 07       	cpc	r20, r26
    10de:	5b 07       	cpc	r21, r27
    10e0:	c0 f2       	brcs	.-80     	; 0x1092 <Delay_ms+0x5e>
		(SET_BIT(TIFR,TIFR_TOV0));
		local_ticks++;
	}


}
    10e2:	2c 96       	adiw	r28, 0x0c	; 12
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <main>:
#include "main.h"

uint8 counter = 0;
uint8 value = 0;
int main(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(DIO_PORTD,PIN2,INPUT);
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_setPinDirection>
	DIO_INTERRUPT_enableINT0(RISING_EDGE_TRIGGERING);
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_INTERRUPT_enableINT0>
	DIO_INTERRUPT_callBack(ISR_EXTINT0);
    110e:	8e e8       	ldi	r24, 0x8E	; 142
    1110:	98 e0       	ldi	r25, 0x08	; 8
    1112:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_INTERRUPT_callBack>
	TIMER0_init();
    1116:	0e 94 9c 05 	call	0xb38	; 0xb38 <TIMER0_init>
    111a:	ff cf       	rjmp	.-2      	; 0x111a <main+0x26>

0000111c <ISR_EXTINT0>:

	}
}

void ISR_EXTINT0(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	static uint8 T1 = 0;
	static uint8 T2 = 0;
	static uint8 T3 = 0;
	static uint8 flag = 0;

	if ((flag == 0) && (T2 == 0))
    1124:	80 91 64 00 	lds	r24, 0x0064
    1128:	88 23       	and	r24, r24
    112a:	69 f4       	brne	.+26     	; 0x1146 <ISR_EXTINT0+0x2a>
    112c:	80 91 66 00 	lds	r24, 0x0066
    1130:	88 23       	and	r24, r24
    1132:	49 f4       	brne	.+18     	; 0x1146 <ISR_EXTINT0+0x2a>
	{
		T1 = TCNT0;
    1134:	e2 e5       	ldi	r30, 0x52	; 82
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 93 67 00 	sts	0x0067, r24
		flag = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 64 00 	sts	0x0064, r24
    1144:	1d c0       	rjmp	.+58     	; 0x1180 <ISR_EXTINT0+0x64>
	}
	else if (flag == 1)
    1146:	80 91 64 00 	lds	r24, 0x0064
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	61 f4       	brne	.+24     	; 0x1166 <ISR_EXTINT0+0x4a>
	{
		T2 = TCNT0;
    114e:	e2 e5       	ldi	r30, 0x52	; 82
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 93 66 00 	sts	0x0066, r24
		DIO_INTERRUPT_enableINT0(FALLING_EDGE_TRIGGERING);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_INTERRUPT_enableINT0>
		flag = 0;
    1160:	10 92 64 00 	sts	0x0064, r1
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <ISR_EXTINT0+0x64>
	}
	else if ((flag == 0) && (T2 != 0))
    1166:	80 91 64 00 	lds	r24, 0x0064
    116a:	88 23       	and	r24, r24
    116c:	49 f4       	brne	.+18     	; 0x1180 <ISR_EXTINT0+0x64>
    116e:	80 91 66 00 	lds	r24, 0x0066
    1172:	88 23       	and	r24, r24
    1174:	29 f0       	breq	.+10     	; 0x1180 <ISR_EXTINT0+0x64>
	{
		T3 = TCNT0;
    1176:	e2 e5       	ldi	r30, 0x52	; 82
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 93 65 00 	sts	0x0065, r24
	}


}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <__mulsi3>:
    1186:	62 9f       	mul	r22, r18
    1188:	d0 01       	movw	r26, r0
    118a:	73 9f       	mul	r23, r19
    118c:	f0 01       	movw	r30, r0
    118e:	82 9f       	mul	r24, r18
    1190:	e0 0d       	add	r30, r0
    1192:	f1 1d       	adc	r31, r1
    1194:	64 9f       	mul	r22, r20
    1196:	e0 0d       	add	r30, r0
    1198:	f1 1d       	adc	r31, r1
    119a:	92 9f       	mul	r25, r18
    119c:	f0 0d       	add	r31, r0
    119e:	83 9f       	mul	r24, r19
    11a0:	f0 0d       	add	r31, r0
    11a2:	74 9f       	mul	r23, r20
    11a4:	f0 0d       	add	r31, r0
    11a6:	65 9f       	mul	r22, r21
    11a8:	f0 0d       	add	r31, r0
    11aa:	99 27       	eor	r25, r25
    11ac:	72 9f       	mul	r23, r18
    11ae:	b0 0d       	add	r27, r0
    11b0:	e1 1d       	adc	r30, r1
    11b2:	f9 1f       	adc	r31, r25
    11b4:	63 9f       	mul	r22, r19
    11b6:	b0 0d       	add	r27, r0
    11b8:	e1 1d       	adc	r30, r1
    11ba:	f9 1f       	adc	r31, r25
    11bc:	bd 01       	movw	r22, r26
    11be:	cf 01       	movw	r24, r30
    11c0:	11 24       	eor	r1, r1
    11c2:	08 95       	ret

000011c4 <__udivmodsi4>:
    11c4:	a1 e2       	ldi	r26, 0x21	; 33
    11c6:	1a 2e       	mov	r1, r26
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	fd 01       	movw	r30, r26
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <__udivmodsi4_ep>

000011d0 <__udivmodsi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	ee 1f       	adc	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	a2 17       	cp	r26, r18
    11da:	b3 07       	cpc	r27, r19
    11dc:	e4 07       	cpc	r30, r20
    11de:	f5 07       	cpc	r31, r21
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__udivmodsi4_ep>
    11e2:	a2 1b       	sub	r26, r18
    11e4:	b3 0b       	sbc	r27, r19
    11e6:	e4 0b       	sbc	r30, r20
    11e8:	f5 0b       	sbc	r31, r21

000011ea <__udivmodsi4_ep>:
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	1a 94       	dec	r1
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <__udivmodsi4_loop>
    11f6:	60 95       	com	r22
    11f8:	70 95       	com	r23
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	bd 01       	movw	r22, r26
    1204:	cf 01       	movw	r24, r30
    1206:	08 95       	ret

00001208 <_exit>:
    1208:	f8 94       	cli

0000120a <__stop_program>:
    120a:	ff cf       	rjmp	.-2      	; 0x120a <__stop_program>
